"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[3524],{1709:(i,s,a)=>{a.d(s,{l:()=>n});const n={category:{"/":{path:"/category/",map:{使用指南:{path:"/category/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",indexes:[0,1,2,3,4]},指南:{path:"/category/%E6%8C%87%E5%8D%97/",indexes:[5]},ESP32S3:{path:"/category/esp32s3/",indexes:[6]},单片机:{path:"/category/%E5%8D%95%E7%89%87%E6%9C%BA/",indexes:[7,6,8,9]},培训:{path:"/category/%E5%9F%B9%E8%AE%AD/",indexes:[10,11,12,8,9,13,14,15,16,17,18,19,20,21]},ESP32:{path:"/category/esp32/",indexes:[10,11,12,13,14,15,16,17,18,19]},香蕉:{path:"/category/%E9%A6%99%E8%95%89/",indexes:[22]},水果:{path:"/category/%E6%B0%B4%E6%9E%9C/",indexes:[22]},ESP32S3NANO:{path:"/category/esp32s3nano/",indexes:[7]},Python:{path:"/category/python/",indexes:[7]},ollama:{path:"/category/ollama/",indexes:[7]},STM32:{path:"/category/stm32/",indexes:[23]},STM32CubeMX:{path:"/category/stm32cubemx/",indexes:[23]},ESP3:{path:"/category/esp3/",indexes:[20]},PCB:{path:"/category/pcb/",indexes:[8]},香橙派:{path:"/category/%E9%A6%99%E6%A9%99%E6%B4%BE/",indexes:[24,25,26,27,28,29]},orangepi:{path:"/category/orangepi/",indexes:[24,25,26,27,28,29]},linux:{path:"/category/linux/",indexes:[24,25,26,27,28,29]},QQ机器人:{path:"/category/qq%E6%9C%BA%E5%99%A8%E4%BA%BA/",indexes:[26]},minecraft:{path:"/category/minecraft/",indexes:[27]},opencv:{path:"/category/opencv/",indexes:[28,29]}}}},tag:{"/":{path:"/tag/",map:{禁用:{path:"/tag/%E7%A6%81%E7%94%A8/",indexes:[2]},布局:{path:"/tag/%E5%B8%83%E5%B1%80/",indexes:[5]},Markdown:{path:"/tag/markdown/",indexes:[3]},页面配置:{path:"/tag/%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/",indexes:[0]},使用指南:{path:"/tag/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",indexes:[0]},hardware:{path:"/tag/hardware/",indexes:[7,6]},圆:{path:"/tag/%E5%9C%86/",indexes:[7,6]},ESP32S3:{path:"/tag/esp32s3/",indexes:[12,18,19,20]},ESP32:{path:"/tag/esp32/",indexes:[10,11,12,18,19,20]},ESP:{path:"/tag/esp/",indexes:[12,18,19,20]},wifi:{path:"/tag/wifi/",indexes:[12]},黄:{path:"/tag/%E9%BB%84/",indexes:[22]},弯曲的:{path:"/tag/%E5%BC%AF%E6%9B%B2%E7%9A%84/",indexes:[22]},长:{path:"/tag/%E9%95%BF/",indexes:[22]},FatFS:{path:"/tag/fatfs/",indexes:[23]},SD:{path:"/tag/sd/",indexes:[23]},SDMMC:{path:"/tag/sdmmc/",indexes:[23]},SDIO:{path:"/tag/sdio/",indexes:[23]},I2C:{path:"/tag/i2c/",indexes:[10,11]},OLED:{path:"/tag/oled/",indexes:[10,11]},mpu6050:{path:"/tag/mpu6050/",indexes:[10,11]},SPI:{path:"/tag/spi/",indexes:[13]},TFT:{path:"/tag/tft/",indexes:[13]},触摸屏:{path:"/tag/%E8%A7%A6%E6%91%B8%E5%B1%8F/",indexes:[13]},spi:{path:"/tag/spi/",indexes:[13]},ledc:{path:"/tag/ledc/",indexes:[14,15,16,17]},PWM:{path:"/tag/pwm/",indexes:[14,15,16,17]},pwm:{path:"/tag/pwm/",indexes:[14,15,16,17]},Clang:{path:"/tag/clang/",indexes:[8,9]},培训:{path:"/tag/%E5%9F%B9%E8%AE%AD/",indexes:[21]},加密:{path:"/tag/%E5%8A%A0%E5%AF%86/",indexes:[4]},orangepi:{path:"/tag/orangepi/",indexes:[24,25,26,27,28,29]},linux:{path:"/tag/linux/",indexes:[24,25,26,27,28,29]},wiring:{path:"/tag/wiring/",indexes:[24,25]},硬件:{path:"/tag/%E7%A1%AC%E4%BB%B6/",indexes:[25]},软件:{path:"/tag/%E8%BD%AF%E4%BB%B6/",indexes:[26,27,28,29]},opencv:{path:"/tag/opencv/",indexes:[28,29]}}}}}},4776:(i,s,a)=>{a.d(s,{M:()=>n});const n=["/demo/page.html","/demo/","/demo/disable.html","/demo/markdown.html","/posts/%E5%B7%A5%E4%BD%9C%E5%AE%A4%E5%86%85%E5%AE%B9/1.html","/demo/layout.html","/posts/tomato.html","/posts/2024%E4%BA%8C%E6%9C%9F%E5%9F%B9%E8%AE%AD/5.html","/posts/%E5%B7%A5%E4%BD%9C%E5%AE%A4%E5%86%85%E5%AE%B9/2.html","/posts/2025%E6%9A%91%E5%81%87%E5%9F%B9%E8%AE%AD%E5%86%85%E5%AE%B9/1.html","/posts/2024%E4%B8%80%E6%9C%9F%E5%9F%B9%E8%AE%AD/2.html","/posts/2025%E6%9A%91%E5%81%87%E5%9F%B9%E8%AE%AD%E5%86%85%E5%AE%B9/2.html","/posts/2024%E4%BA%8C%E6%9C%9F%E5%9F%B9%E8%AE%AD/2.html","/posts/2024%E4%B8%80%E6%9C%9F%E5%9F%B9%E8%AE%AD/3.html","/posts/2024%E4%B8%80%E6%9C%9F%E5%9F%B9%E8%AE%AD/4.html","/posts/2024%E4%B8%80%E6%9C%9F%E5%9F%B9%E8%AE%AD/5.html","/posts/2025%E6%9A%91%E5%81%87%E5%9F%B9%E8%AE%AD%E5%86%85%E5%AE%B9/4.html","/posts/2025%E6%9A%91%E5%81%87%E5%9F%B9%E8%AE%AD%E5%86%85%E5%AE%B9/5.html","/posts/2024%E4%BA%8C%E6%9C%9F%E5%9F%B9%E8%AE%AD/1.html","/posts/2024%E4%BA%8C%E6%9C%9F%E5%9F%B9%E8%AE%AD/4.html","/posts/2024%E4%B8%80%E6%9C%9F%E5%9F%B9%E8%AE%AD/1.html","/posts/2025%E6%9A%91%E5%81%87%E5%9F%B9%E8%AE%AD%E5%86%85%E5%AE%B9/3.html","/posts/2024%E4%BA%8C%E6%9C%9F%E5%9F%B9%E8%AE%AD/3.html","/posts/2024%E4%BA%8C%E6%9C%9F%E5%9F%B9%E8%AE%AD/6.html","/posts/%E9%A6%99%E6%A9%99%E6%B4%BE%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/1.html","/posts/%E9%A6%99%E6%A9%99%E6%B4%BE%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/2.html","/posts/%E9%A6%99%E6%A9%99%E6%B4%BE%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/3.html","/posts/%E9%A6%99%E6%A9%99%E6%B4%BE%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/4.html","/posts/%E9%A6%99%E6%A9%99%E6%B4%BE%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/5.html","/posts/%E9%A6%99%E6%A9%99%E6%B4%BE%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/6.html","/intro.html"]},3781:(i,s,a)=>{a.d(s,{U:()=>n});const n={article:{"/":{path:"/article/",indexes:[7,6,10,11,0,12,22,8,9,23,24,25,26,27,28,29,13,14,15,16,17,18,19,20,30,1,2,5,3,21,4]}},star:{"/":{path:"/star/",indexes:[7,6,10,11,0]}},timeline:{"/":{path:"/timeline/",indexes:[12,22,8,9,23,7,6,24,25,26,27,28,29,13,14,15,16,17,18,19,20,10,11,30,1,2,5,3,21,4,0]}}}},7877:(i,s,a)=>{a.d(s,{B:()=>R});var n={};a.r(n);var t={};a.r(t);var l={};a.r(l),a.d(l,{default:()=>y});var e={};a.r(e);var h={};a.r(h),a.d(h,{default:()=>b});var k={};a.r(k),a.d(k,{default:()=>S});var p={};a.r(p),a.d(p,{default:()=>M});var d=a(2402),r=a(3073),A=a(9403),g=a(596),B=a(8831);const y={enhance:({app:i})=>{(0,d.L4)("FontIcon")||i.component("FontIcon",A.A),(0,d.L4)("Badge")||i.component("Badge",g.A),(0,d.L4)("VPCard")||i.component("VPCard",B.A)},setup:()=>{(0,r.r9V)("https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/js/brands.min.js",(()=>{}),{attrs:{"data-auto-replace-svg":"nest"}}),(0,r.r9V)("https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/js/solid.min.js",(()=>{}),{attrs:{"data-auto-replace-svg":"nest"}}),(0,r.r9V)("https://cdn.jsdelivr.net/npm/@fortawesome/fontawesome-free@6/js/fontawesome.min.js",(()=>{}),{attrs:{"data-auto-replace-svg":"nest"}})},rootComponents:[]};var o=a(6358),c=a(3827),F=a(355),E=a(1599),m=a(8913),C=a(457),u=a(3349),v=a(1781),f=a(9212);const b={enhance:({app:i})=>{i.component("CodeTabs",v.S),i.component("Tabs",f.t)}};var D=a(8031),x=a(3027);const S={enhance:({app:i})=>{i.component("CodeDemo",D.A),i.component("MdDemo",x.A)}};var I=a(5753),_=a(5054),P=a(783),w=a(8465),O=a(641),T=a(7107),L=a(9920);(0,w.M_)((i=>{const s=i.t,a=!1!==i.I,n=i.i;return a?{title:s,content:n?()=>[(0,O.h)(P.GB,{icon:n}),s]:null,order:i.O,index:i.I}:null}));const M={enhance:({app:i,router:s})=>{const{scrollBehavior:a}=s.options;s.options.scrollBehavior=async(...i)=>(await P.lE.wait(),a(...i)),(0,P.fk)(i),i.component("HopeIcon",P.GB),i.component("BloggerInfo",T.tI),i.component("SocialMedias",T.rS),i.component("GlobalEncrypt",L.J),i.component("LocalEncrypt",L.n)},setup:()=>{(0,P.PV)(),(0,P.i$)(),(0,T.su)()},layouts:{Layout:P.PE,NotFound:P.Mk,BlogCategory:T.Pn,BlogHome:T.qX,BlogType:T.z7,Timeline:T.Kf}},R=[n,t,l,o,c,F,E,m,C,u,e,h,k,I,_,p].map((i=>i.default)).filter(Boolean)},8164:(i,s,a)=>{a.d(s,{J:()=>t,c:()=>n});const n=JSON.parse("{}"),t=Object.fromEntries([["/intro.html",{loader:()=>a.e(3912).then(a.bind(a,164)),meta:{d:1733063455e3,v:"/assets/images/cover3.jpg",e:'\n<h2>- ⚙️ 技术栈</h2>\n<ul>\n<li>熟悉STM32，ESP32的C/C++与Micropython开发</li>\n<li>简单的的OpenCV和YOLO开发</li>\n<li>熟悉SolidWorks建模与运动算例，AutoCAD，3D打印，ANSYS仿真</li>\n<li>比较熟悉嵌入式Linux的开发和项目部署</li>\n</ul>\n<p>(tips: 将你的个人介绍和档案放置在此处)</p>\n<h2>- ⭐ GitHub Star</h2>\n<figure><img src="https://github-readme-stats.vercel.app/api?username=ouyanglingle&amp;show_icons=true&amp;theme=moltack" alt="ouyanglingle\'s GitHub stats" tabindex="0" loading="lazy"><figcaption>ouyanglingle\'s GitHub stats</figcaption></figure>',r:{minutes:.38,words:113},t:"介绍页",i:"circle-info",y:"a"}}],["/demo/",{loader:()=>a.e(3320).then(a.bind(a,5351)),meta:{d:1733063455e3,c:["使用指南"],r:{minutes:.07,words:22},t:"主要功能与配置演示",i:"laptop-code",y:"a"}}],["/demo/disable.html",{loader:()=>a.e(2756).then(a.bind(a,4139)),meta:{d:1733063455e3,c:["使用指南"],g:["禁用"],e:"<p>你可以通过设置页面的 Frontmatter，在页面禁用功能与布局。</p>\n",r:{minutes:.43,words:128},t:"布局与功能禁用",i:"gears",O:4,y:"a"}}],["/demo/layout.html",{loader:()=>a.e(6216).then(a.bind(a,4087)),meta:{d:1733063455e3,c:["指南"],g:["布局"],e:'<p>布局包括:</p>\n<ul>\n<li><a href="https://theme-hope.vuejs.press/zh/guide/layout/navbar.html" target="_blank" rel="noopener noreferrer">导航栏</a></li>\n<li><a href="https://theme-hope.vuejs.press/zh/guide/layout/sidebar.html" target="_blank" rel="noopener noreferrer">侧边栏</a></li>\n<li><a href="https://theme-hope.vuejs.press/zh/guide/layout/footer.html" target="_blank" rel="noopener noreferrer">页脚</a></li>\n</ul>',r:{minutes:.53,words:159},t:"布局",i:"object-group",O:2,y:"a"}}],["/demo/markdown.html",{loader:()=>a.e(8711).then(a.bind(a,6908)),meta:{d:1733063455e3,c:["使用指南"],g:["Markdown"],e:"<p>VuePress 主要从 Markdown 文件生成页面。因此，你可以使用它轻松生成文档或博客站点。</p>\n<p>你需要创建并编写 Markdown，以便 VuePress 可以根据文件结构将它们转换为不同的页面。</p>\n",r:{minutes:3.47,words:1041},t:"Markdown 展示",i:"fab fa-markdown",O:2,y:"a"}}],["/demo/page.html",{loader:()=>a.e(645).then(a.bind(a,5397)),meta:{a:"Ms.Hope",d:15778368e5,l:"2020年1月1日",c:["使用指南"],g:["页面配置","使用指南"],u:!0,v:"/assets/images/cover1.jpg",e:"<p><code>more</code> 注释之前的内容被视为文章摘要。</p>\n",r:{minutes:1.76,words:529},t:"页面配置",i:"file",O:3,y:"a"}}],["/posts/tomato.html",{loader:()=>a.e(6218).then(a.bind(a,6561)),meta:{d:17356032e5,l:"2024年12月31日",c:["ESP32S3","单片机"],g:["hardware","圆"],u:!0,v:"/assets/images/cover2.jpg",e:"\n<p>能和我写一辈子的blog吗</p>\n<h2>标题 2</h2>\n<p>哈</p>\n<h3>标题 3</h3>\n<p>这里是内容。</p>\n",r:{minutes:.39,words:118},t:"单文件博客模板",i:"pen-to-square",O:1,y:"a"}}],["/posts/2024%E4%BA%8C%E6%9C%9F%E5%9F%B9%E8%AE%AD/1.html",{loader:()=>a.e(5279).then(a.bind(a,2049)),meta:{d:1735489622e3,c:["培训","ESP32"],g:["ESP32S3","ESP32","ESP"],e:"\n<h2>1 外部中断</h2>\n<h3>1.1 什么是中断</h3>\n<ul>\n<li>在单片机系统中，中断是一种机制。它允许单片机在执行正常程序的过程中，暂停当前的任务，转而去处理其它更为紧急或者有更高优先级的事件。当这个紧急事件处理完毕后，单片机又能够回到原来被中断的地方，继续执行之前的程序，就好像被打断的工作又重新开始一样。</li>\n<li>例如，想象你正在房间里看书（这就相当于单片机在执行主程序），突然电话铃响了（这就是一个中断事件）。你放下书本去接电话（处理中断），接完电话后，你又能回到刚才看书的地方继续阅读（返回主程序）。</li>\n</ul>\n<h3>1.2 外部中断介绍</h3>",r:{minutes:10.96,words:3287},t:"外部中断与定时器",i:"pen-to-square",O:1,y:"a"}}],["/posts/2024%E4%BA%8C%E6%9C%9F%E5%9F%B9%E8%AE%AD/2.html",{loader:()=>a.e(2534).then(a.bind(a,2503)),meta:{d:17519328e5,l:"2025年7月8日",c:["培训","ESP32"],g:["ESP32S3","ESP32","ESP","wifi"],e:"\n<blockquote>\n</blockquote>\n<p>ESP32-S3 支持 <strong>2.4 GHz</strong> 的 Wi-Fi 4（802.11n）标准，提供高达 150 Mbps 的数据传输速率。它支持 <strong>STA</strong>（Station）模式、<strong>AP</strong>（Access Point）模式和 <strong>Wi-Fi 直连</strong>（Wi-Fi Direct）模式，可以灵活地连接到其他设备或创建自身的网络。<strong>ESP32-S3 还支持硬件加速的 Wi-Fi 加密算法</strong>，包括 WPA/WPA2-PSK 和 WPA3-SAE 加密。这使得加密和解密数据的速度更快，提高了系统的整体性能和安全性。</p>",r:{minutes:13.57,words:4072},t:"WIFI",i:"pen-to-square",O:2,y:"a"}}],["/posts/2024%E4%BA%8C%E6%9C%9F%E5%9F%B9%E8%AE%AD/3.html",{loader:()=>a.e(9485).then(a.bind(a,628)),meta:{d:17519328e5,l:"2025年7月8日",c:["香蕉","水果"],g:["黄","弯曲的","长"],e:"\n<p>首先要说明的是，常见的MCU如STM32F103、RP2040、CH32V203、Atmega328p、AT32F403A等都是支持裸机开发的，同时他们也都可以移植RTOS系统。但是对于ESP32来说，它不支持裸机开发，只能使用FreeRTOS系统。如果你有浏览过ESP32的固件源码，是会发现loop函数其实在一个FreeRTOS任务里面，包括初始化蓝牙，wifi之类的函数都是一个创建FreeRTOS的任务。</p>\n",r:{minutes:.59,words:178},t:"裸机任务调度",i:"pen-to-square",O:3,y:"a"}}],["/posts/2024%E4%BA%8C%E6%9C%9F%E5%9F%B9%E8%AE%AD/4.html",{loader:()=>a.e(9140).then(a.bind(a,5049)),meta:{d:17354304e5,l:"2024年12月29日",c:["培训","ESP32"],g:["ESP32S3","ESP32","ESP"],e:"\n<p>FreeRTOS是一个开源的实时操作系统，它提供了一组库函数和应用程序编程接口（API），用于在多任务环境中实现实时性。FreeRTOS提供了许多高级功能，如任务管理、同步机制、内存管理、中断处理等，这些功能使得开发人员可以轻松地创建复杂的实时应用程序。\nESP32Arduino固件自带FreeRTOS库，免去了繁琐的移植操作。\n在使用时直接<code>#include &lt;freertos/FreeRTOS.h&gt;</code>和<code>#include &lt;freertos/task.h&gt;</code>即可。</p>\n<h2>关于FreeRTOS创建多核任务</h2>",r:{minutes:1.01,words:302},t:"FreeRTOS基本使用",i:"pen-to-square",O:4,y:"a"}}],["/posts/2024%E4%BA%8C%E6%9C%9F%E5%9F%B9%E8%AE%AD/5.html",{loader:()=>a.e(1003).then(a.bind(a,3897)),meta:{d:17382816e5,l:"2025年1月31日",c:["ESP32S3NANO","Python","单片机","ollama"],g:["hardware","圆"],u:!0,v:"/assets/images/cover2.jpg",e:"\n<p>近期deepseek-r1大火，而我在2025-1-30才去关注它，既然它这么高效，我们不妨部署一个deepseek-r1或是qwen2.5语言大模型在某些性能强大的Linux单板机上玩玩。不过家里的香橙派zero3性能实在拉垮，笔者最后还是在自己的win11笔记本电脑上部署的。</p>\n<p>笔者也是从零开始，花了将近一下午的时间去实现部署模型、给提示词、代码调用、添加语音转文本，编写ESP32接收AT指令代码。令人欣慰的是时间没有被浪费，整体效果还是不错的。</p>\n<h2>1 安装所需环境</h2>\n<p>首先需要去安装ollama，python3.10。ollama和python的安装教程网上有很多，这里就不多赘述了。</p>",r:{minutes:8,words:2399},t:"Python调用千问2.5或deepseek-r1自然语言模型，实现串口输出AT命令控制ESP32S3NANO单片机GPIO数字输出或PWM输出",i:"pen-to-square",O:5,y:"a"}}],["/posts/2024%E4%BA%8C%E6%9C%9F%E5%9F%B9%E8%AE%AD/6.html",{loader:()=>a.e(9730).then(a.bind(a,1831)),meta:{d:1748357828e3,c:["STM32","STM32CubeMX"],g:["FatFS","SD","SDMMC","SDIO"],e:'\n<div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">/* USER CODE BEGIN 0 */</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 在全局变量中定义：</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">FRESULT f_res;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">     /* 操作结果 */</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">FATFS fs;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">          /* FAT句柄 */</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">FIL file;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">          /* 文件句柄 */</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">UINT BW;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">           /* 全称叫byte_write: 写入字节长度,这个变量一般用于接收 f_write() 函数执行后，实际写入了多少字节。 */</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">UINT BR;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">           /* 全称叫byte_read: 读取字节长度,这个变量一般用于接收 f_read() 函数执行后，实际读取了多少字节。 */</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">char</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> buffer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">2048</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">];</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> /* 存储文件内容的缓冲区 */</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">// 定义最大行长度和缓冲区大小</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">#define</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> MAX_LINE_LEN</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 256</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">/**</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic">@brief</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> 读取文件中指定行的内容</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic">@param</span><span style="--shiki-light:#383A42;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> path</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> 文件路径</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic">@param</span><span style="--shiki-light:#383A42;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> target_line</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> 要读取的目标行号（从0开始）</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic">@param</span><span style="--shiki-light:#383A42;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> buffer</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> 存放结果的缓冲区</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic">@param</span><span style="--shiki-light:#383A42;--shiki-light-font-style:italic;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> bufsize</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> 缓冲区大小</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic">@return</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> 成功返回0，失败返回-1</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> */</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> read_specific_line_by_byte</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">const</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> char</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">path</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> target_line</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">char</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic">buffer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">size_t</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic"> bufsize</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    FIL file;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 局部文件对象</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    FRESULT res;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    UINT br;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    char</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> c;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> current_line </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> offset </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    memset</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(buffer, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, bufsize);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 清空缓冲区</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 打开文件</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    res </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> f_open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">file, path, FA_READ);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (res </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">!=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> FR_OK)</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 初始化缓冲区</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    buffer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> \'</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">\'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 逐字节读取文件</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">f_read</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">file, </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">c, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">br) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> FR_OK </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2">&amp;&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> br </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (c </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">==</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> \'</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">\'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (current_line </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> target_line)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">                buffer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[offset] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> \'</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">\'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">                f_close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">file);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">                return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            current_line</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            offset </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        }</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (c </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">!=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> \'</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\r</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">\'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        {</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">            if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (offset </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> bufsize </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">                buffer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[offset</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">++</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> c;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            }</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">            else</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">                buffer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[offset] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> \'</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">\'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">                f_close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">file);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">                return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">            }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">        }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 如果最后一行没有换行符但仍为目标行</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (current_line </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> target_line)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    {</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">        buffer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[offset] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> \'</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">\'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">        f_close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">file);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">        return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    f_close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">file);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    return</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> -</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> pin </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, state </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">/* USER CODE END 0 */</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">/**</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic">@brief</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">  The application entry point.</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> * </span><span style="--shiki-light:#A626A4;--shiki-light-font-style:italic;--shiki-dark:#C678DD;--shiki-dark-font-style:italic">@retval</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> int</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> */</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">int</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> main</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">void</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">{</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* USER CODE BEGIN 1 */</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* USER CODE END 1 */</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* MPU Configuration--------------------------------------------------------*/</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    MPU_Config</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* MCU Configuration--------------------------------------------------------*/</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* Reset of all peripherals, Initializes the Flash interface and the Systick. */</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    HAL_Init</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* USER CODE BEGIN Init */</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* USER CODE END Init */</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* Configure the system clock */</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    SystemClock_Config</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* USER CODE BEGIN SysInit */</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* USER CODE END SysInit */</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* Initialize all configured peripherals */</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    MX_GPIO_Init</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    MX_DMA_Init</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    MX_SDMMC1_SD_Init</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    MX_USART1_UART_Init</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    MX_FATFS_Init</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">();</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* USER CODE BEGIN 2 */</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    HAL_GPIO_WritePin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(LED_GPIO_Port, LED_Pin, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    char</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B"> senddata</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">40</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> ""</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    sprintf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(senddata, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">StartTimeStamp: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%u</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">HAL_GetTick</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">());</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    HAL_UART_Transmit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">huart1, (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">uint8_t</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)senddata, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">sizeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(senddata), </span><span style="--shiki-light:#986801;--shiki-dark:#E06C75">0x</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">FFFF</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // ===== 1.首先要挂载设备 =====</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    f_res </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> f_mount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">fs, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"0:"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 0:不挂载  1：挂载</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // ===== 2.按照需要的编辑方式打开文件 =====</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    f_res </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> f_open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">file, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"0:test.txt"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, FA_OPEN_ALWAYS </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2">|</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> FA_WRITE);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 如果文件存在则打开，如果文件不存在则创建并打开</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // ===== 3.写入数据 =====</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    f_res </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> f_write</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">file, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"STM32H750VBT6打开了文件"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">strlen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"STM32H750VBT6打开了文件"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">), </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">BW);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 在FA_OPEN_ALWAYS|FA_WRITE模式下这样写内容的话指针会在第一行</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // ===== 4.卸载设备前关闭文件，5.卸载设备（看后面） =====</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    f_res </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> f_close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">file);</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // ===== 现在开始测试读文件 =====</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    f_res </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> f_open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">file, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"0:test.txt"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, FA_READ);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 用只读方式打开文件</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (f_res </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> FR_NO_FILE)</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">        HAL_UART_Transmit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">huart1, (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">uint8_t</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"文件不存在</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">sizeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"文件不存在</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">), </span><span style="--shiki-light:#986801;--shiki-dark:#E06C75">0x</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">FFFF</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    else</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (f_res </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">==</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> FR_INVALID_NAME)</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">        HAL_UART_Transmit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">huart1, (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">uint8_t</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"路径错误了?</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">sizeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"路径错误了?</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">), </span><span style="--shiki-light:#986801;--shiki-dark:#E06C75">0x</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">FFFF</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // 读取文件内容</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    f_read</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">file, buffer, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">sizeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(buffer) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">BR);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 留1字节给终止符</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B">    buffer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">[BR] </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379"> \'</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\0</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">\'</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /*在 C 语言中，字符串是以 \\0 结尾的字符数组。如果不手动加上 \\0，buffer 中虽然有数据，</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    但不能被当作字符串使用（例如不能用 printf("%s", buffer) 正确输出）。因为前面只读了 sizeof(buffer) - 1 字节，</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    所以最后一个位置 buffer[br] 一定存在，可以安全赋值。*/</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    HAL_UART_Transmit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">huart1, (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">uint8_t</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">读到了: </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">strlen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">读到了: </span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">), </span><span style="--shiki-light:#986801;--shiki-dark:#E06C75">0x</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">FFFF</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    HAL_UART_Transmit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">huart1, (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">uint8_t</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)buffer, </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">strlen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(buffer), </span><span style="--shiki-light:#986801;--shiki-dark:#E06C75">0x</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">FFFF</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    HAL_UART_Transmit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">huart1, (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">uint8_t</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">strlen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">), </span><span style="--shiki-light:#986801;--shiki-dark:#E06C75">0x</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">FFFF</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    f_close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">file);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">read_specific_line_by_byte</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"0:test.txt"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">4</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">-</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, buffer, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">sizeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(buffer)) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    {</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">        HAL_UART_Transmit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">huart1, (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">uint8_t</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">第i行内容为:"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">strlen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">第i行内容为:"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">), </span><span style="--shiki-light:#986801;--shiki-dark:#E06C75">0x</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">FFFF</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">        HAL_UART_Transmit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">huart1, (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">uint8_t</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)buffer, </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">strlen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(buffer), </span><span style="--shiki-light:#986801;--shiki-dark:#E06C75">0x</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">FFFF</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    else</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">        HAL_UART_Transmit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">huart1, (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">uint8_t</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">无法读取该行</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">strlen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">无法读取该行</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">), </span><span style="--shiki-light:#986801;--shiki-dark:#E06C75">0x</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">FFFF</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    sscanf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(buffer, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"&lt;AT&gt;AT+GPIO=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%d</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">pin, </span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">state);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">\t\tHAL_GPIO_WritePin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(LED_GPIO_Port, LED_Pin, state);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    // ===== 5.卸载设备</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    f_res </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF"> f_mount</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">fs, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"0:"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic"> // 0:不挂载  1：挂载</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (f_res </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">!=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> FR_OK)</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">        HAL_UART_Transmit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">huart1, (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">uint8_t</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">卸载失败"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">strlen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">卸载失败"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">), </span><span style="--shiki-light:#986801;--shiki-dark:#E06C75">0x</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">FFFF</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    else</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">        HAL_UART_Transmit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">huart1, (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">uint8_t</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">卸载成功"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">strlen</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">卸载成功"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">), </span><span style="--shiki-light:#986801;--shiki-dark:#E06C75">0x</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">FFFF</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    sprintf</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(senddata, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">EndTimeStamp: </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">%u</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379">"</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">, </span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">HAL_GetTick</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">());</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF">    HAL_UART_Transmit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2">&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">huart1, (</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">uint8_t</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)senddata, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">sizeof</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">(senddata), </span><span style="--shiki-light:#986801;--shiki-dark:#E06C75">0x</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">FFFF</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">);</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* USER CODE END 2 */</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* Infinite loop */</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* USER CODE BEGIN WHILE */</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD">    while</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF"> (</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66">1</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">)</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        /* USER CODE END WHILE */</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">        /* USER CODE BEGIN 3 */</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">    }</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic">    /* USER CODE END 3 */</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF">}</span></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',r:{minutes:3.57,words:1072},t:"STM32H750VBT6使用SDMMC和FatFS读写SD卡",i:"pen-to-square",O:6,y:"a"}}],["/posts/2024%E4%B8%80%E6%9C%9F%E5%9F%B9%E8%AE%AD/1.html",{loader:()=>a.e(1443).then(a.bind(a,6988)),meta:{d:17354304e5,l:"2024年12月29日",c:["培训","ESP3"],g:["ESP32S3","ESP32","ESP"],v:"/assets/images/ESP32.jpg",e:'\n<h2>点个灯先，成为点灯大师</h2>\n<p><a href="https://espressif-docs.readthedocs-hosted.com/projects/arduino-esp32/en/latest/api/gpio.html" target="_blank" rel="noopener noreferrer">GPIO — Arduino-ESP32 2.0.14 documentation</a></p>\n<p>GPIO是什么？\nGeneral Purpose Input Output 通用功能输出输出，用于电信号在电路中的输入输出，以方便控制电路\t部件。\nGPIO就是从芯片内部引出来一根功能复用的口线（电线）\n功能复用是指：GPIO的引脚可以由CPU配置成不同的功能\n比如：输入功能 输出功能 模拟功能 复用功能等等</p>',r:{minutes:5.24,words:1571},t:"对GPIO的简单操作",i:"pen-to-square",O:1,y:"a"}}],["/posts/2024%E4%B8%80%E6%9C%9F%E5%9F%B9%E8%AE%AD/2.html",{loader:()=>a.e(362).then(a.bind(a,5759)),meta:{d:17354304e5,l:"2024年12月29日",c:["培训","ESP32"],g:["I2C","ESP32","OLED","mpu6050"],u:!0,e:"\n<p>I2C的使用还是比较简单的，Arduino固件自带的Wire库足以让我们实现通信。但鉴于常见的模块别人已经开发了好几十年了，直接调用驱动库。</p>\n<h2>0.96寸OLED屏幕 的使用（内置SSD1306驱动芯片）</h2>\n<p>OLED，即有机发光二极管（Organic Light Emitting Diode）。OLED 由于同时具备自发光，不需背光源、对比度高、厚度薄、视角广、反应速度快、可用于挠曲性面板、使用温度范围广、构造及制程较简单等优异之特性，被称为是第三代显示技术。</p>\n<p>​\t\tLCD 都需要背光，而 OLED 不需要，因为它是自发光的。这样同样的显示 OLED 效果要来得好一些。以目前的技术，OLED 的尺寸还难以大型化，但是分辨率确可以做到很高。</p>",r:{minutes:10.71,words:3212},t:"常见I2C设备 的使用",i:"pen-to-square",O:2,y:"a"}}],["/posts/2024%E4%B8%80%E6%9C%9F%E5%9F%B9%E8%AE%AD/3.html",{loader:()=>a.e(8305).then(a.bind(a,8020)),meta:{d:17355168e5,l:"2024年12月30日",c:["培训","ESP32"],g:["SPI","TFT","触摸屏","spi"],e:"\n<p>了解即可，感兴趣的可以尝试</p>\n<h2>SPI屏幕（带触摸驱动芯片）（显示驱动ST7789/ST7789V）的使用</h2>\n<h3>基于TFT_eSPi库(针对ESP32和ESP8266优化过)</h3>\n<p>可以去看看我的仓库：https://github.com/ouyanglingle/MyController</p>\n<h3>基于Adafruit_ST7789库(没试过触摸)</h3>\n<h2>嵌入式GUI的拓展</h2>\n<p>这里是内容。</p>\n",r:{minutes:.37,words:111},t:"常用SPI设备 的使用",i:"pen-to-square",O:3,y:"a"}}],["/posts/2024%E4%B8%80%E6%9C%9F%E5%9F%B9%E8%AE%AD/4.html",{loader:()=>a.e(6576).then(a.bind(a,1411)),meta:{d:17355168e5,l:"2024年12月30日",c:["培训","ESP32"],g:["ledc","PWM","pwm"],e:'\n<p>PWM介绍</p>\n<h2>基于ledc外设的PWM输出</h2>\n<p>函数讲解</p>\n<h3>呼吸灯</h3>\n<div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:.27,words:81},t:"ESP32上的PWM输出",i:"pen-to-square",O:4,y:"a"}}],["/posts/2024%E4%B8%80%E6%9C%9F%E5%9F%B9%E8%AE%AD/5.html",{loader:()=>a.e(9399).then(a.bind(a,9799)),meta:{d:17355168e5,l:"2024年12月30日",c:["培训","ESP32"],g:["ledc","PWM","pwm"],e:"\n<h3>了解串口（UART/USART）</h3>\n<h4>串口通信协议实例</h4>\n<p>串口通信协议是在计算机、微控制器或其他设备之间传输数据的一种方式。串口是指外设和处理器之间通过数据信号线、地线和控制线等，<strong>按位</strong>进行传输数据的一种通讯方式。尽管传输速度比并行传输低，但串口可以在<strong>使用一根线发送数据</strong>的同时<strong>用另一根线接收数据</strong>。 这种通信方式使用的数据线少，在远距离通信中可以节约通信成本。在Arduino项目中，串口通信非常常见也非常重要，可以用于设备间的数据传输、调试信息的输出，以及与计算机或其他串行设备的通信。</p>",r:{minutes:7.47,words:2242},t:"ESP32上的串口输出",i:"pen-to-square",O:5,y:"a"}}],["/posts/2025%E6%9A%91%E5%81%87%E5%9F%B9%E8%AE%AD%E5%86%85%E5%AE%B9/1.html",{loader:()=>a.e(4767).then(a.bind(a,6661)),meta:{d:17494859e5,c:["培训","单片机"],g:["Clang"],v:"/assets/images/ESP32.jpg",e:"\n<h2>简单看看</h2>\n<p>在 C 语言中，不同类型占用的字节数是由编译器和平台决定的，但有一些<strong>常见的默认规则</strong>，尤其是在使用 <strong>32位或64位系统</strong> 时（比如 x86/x64 架构，Linux/Windows 常见编译器如 GCC、MSVC）。</p>\n<table>\n<thead>\n<tr>\n<th>类型</th>\n<th>字节数（常见）</th>\n<th>说明</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td><code>char</code></td>\n<td>1</td>\n<td>固定为 1 字节（这是 C 标准规定的）</td>\n</tr>\n<tr>\n<td><code>int</code></td>\n<td>4</td>\n<td>通常为 32 位</td>\n</tr>\n<tr>\n<td><code>long</code></td>\n<td>4 或 8</td>\n<td>在 32 位系统是 4，64 位 Linux 是 8，Windows 仍是 4</td>\n</tr>\n<tr>\n<td><code>long long</code></td>\n<td>8</td>\n<td>通常是 64 位</td>\n</tr>\n<tr>\n<td><code>float</code>（IEEE 754）</td>\n<td>4</td>\n<td>单精度浮点数（32 位）</td>\n</tr>\n<tr>\n<td><code>double</code>（IEEE 754）</td>\n<td>8</td>\n<td>双精度浮点数（64 位）</td>\n</tr>\n</tbody>\n</table>",r:{minutes:6.51,words:1954},t:"再认识一遍嵌入式的C语言",i:"pen-to-square",O:2,y:"a"}}],["/posts/2025%E6%9A%91%E5%81%87%E5%9F%B9%E8%AE%AD%E5%86%85%E5%AE%B9/2.html",{loader:()=>a.e(5430).then(a.bind(a,1496)),meta:{d:17354304e5,l:"2024年12月29日",c:["培训","ESP32"],g:["I2C","ESP32","OLED","mpu6050"],u:!0,e:"\n",r:{minutes:.3,words:89},t:"施工中",i:"pen-to-square",O:3,y:"a"}}],["/posts/2025%E6%9A%91%E5%81%87%E5%9F%B9%E8%AE%AD%E5%86%85%E5%AE%B9/3.html",{loader:()=>a.e(1885).then(a.bind(a,9386)),meta:{d:1733063455e3,c:["培训"],g:["培训"],e:'\n<p><strong>暑假培训的三个主线任务已经在群里发布成群作业了。</strong></p>\n<table>\n<thead>\n<tr>\n<th>日期</th>\n<th style="text-align:center">事件</th>\n<th style="text-align:left">小作业</th>\n<th style="text-align:center">谁负责</th>\n<th style="text-align:center">大作业</th>\n<th>组别</th>\n<th style="text-align:left">备注</th>\n</tr>\n</thead>\n<tbody>\n<tr>\n<td>2025.7.7</td>\n<td style="text-align:center">重新认识C语言</td>\n<td style="text-align:left">群作业有</td>\n<td style="text-align:center">王明照</td>\n<td style="text-align:center"></td>\n<td>控制组</td>\n<td style="text-align:left"></td>\n</tr>\n<tr>\n<td>2025.7.8 - 7.25</td>\n<td style="text-align:center">学习FreeRTOS</td>\n<td style="text-align:left">硬性要求：多任务，软件定时器，互斥锁，FIFO，考察方式待定。</td>\n<td style="text-align:center">吴智超</td>\n<td style="text-align:center"></td>\n<td>控制组</td>\n<td style="text-align:left"></td>\n</tr>\n<tr>\n<td>2025.7.10</td>\n<td style="text-align:center">运动学正/逆解算</td>\n<td style="text-align:left">本次培训的微缩车模</td>\n<td style="text-align:center">王明照</td>\n<td style="text-align:center"></td>\n<td>控制组</td>\n<td style="text-align:left"></td>\n</tr>\n<tr>\n<td>2025.7.15</td>\n<td style="text-align:center">运动学逆解算</td>\n<td style="text-align:left">四平行连杆机械臂 与 常规手臂式3自由度机械臂</td>\n<td style="text-align:center">---</td>\n<td style="text-align:center"></td>\n<td>控制组</td>\n<td style="text-align:left">可能不讲</td>\n</tr>\n<tr>\n<td>2025.7.15</td>\n<td style="text-align:center">数据包构建与解析，设备间的信息传输</td>\n<td style="text-align:left"></td>\n<td style="text-align:center">---</td>\n<td style="text-align:center"></td>\n<td>控制组</td>\n<td style="text-align:left"></td>\n</tr>\n<tr>\n<td>2025.7.21</td>\n<td style="text-align:center">简单的事件总线驱动框架</td>\n<td style="text-align:left">会发布，订阅事件，使用该框架对3个LED实现随机点亮和随机双闪（裸机）</td>\n<td style="text-align:center">王明照</td>\n<td style="text-align:center"></td>\n<td>控制组</td>\n<td style="text-align:left"></td>\n</tr>\n<tr>\n<td>大作业</td>\n<td style="text-align:center">在微缩车模上使用所学内容</td>\n<td style="text-align:left">同时要求完成特定任务，如前往特定坐标等</td>\n<td style="text-align:center">车模可改造</td>\n<td style="text-align:center"></td>\n<td></td>\n<td style="text-align:left"></td>\n</tr>\n<tr>\n<td></td>\n<td style="text-align:center"></td>\n<td style="text-align:left"></td>\n<td style="text-align:center"></td>\n<td style="text-align:center"></td>\n<td></td>\n<td style="text-align:left"></td>\n</tr>\n</tbody>\n</table>',r:{minutes:.95,words:285},t:"暑假培训安排",i:"pen-to-square",O:1,y:"a"}}],["/posts/2025%E6%9A%91%E5%81%87%E5%9F%B9%E8%AE%AD%E5%86%85%E5%AE%B9/4.html",{loader:()=>a.e(532).then(a.bind(a,3234)),meta:{d:17355168e5,l:"2024年12月30日",c:["培训","ESP32"],g:["ledc","PWM","pwm"],e:'\n<p>PWM介绍</p>\n<h2>基于ledc外设的PWM输出</h2>\n<p>函数讲解</p>\n<h3>呼吸灯</h3>\n<div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"></span></code></pre>\n<div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0"><div class="line-number"></div></div></div>',r:{minutes:.27,words:81},t:"ESP32上的PWM输出",i:"pen-to-square",O:4,y:"a"}}],["/posts/2025%E6%9A%91%E5%81%87%E5%9F%B9%E8%AE%AD%E5%86%85%E5%AE%B9/5.html",{loader:()=>a.e(2347).then(a.bind(a,6394)),meta:{d:17355168e5,l:"2024年12月30日",c:["培训","ESP32"],g:["ledc","PWM","pwm"],e:"\n<h3>了解串口（UART/USART）</h3>\n<h4>串口通信协议实例</h4>\n<p>串口通信协议是在计算机、微控制器或其他设备之间传输数据的一种方式。串口是指外设和处理器之间通过数据信号线、地线和控制线等，<strong>按位</strong>进行传输数据的一种通讯方式。尽管传输速度比并行传输低，但串口可以在<strong>使用一根线发送数据</strong>的同时<strong>用另一根线接收数据</strong>。 这种通信方式使用的数据线少，在远距离通信中可以节约通信成本。在Arduino项目中，串口通信非常常见也非常重要，可以用于设备间的数据传输、调试信息的输出，以及与计算机或其他串行设备的通信。</p>",r:{minutes:7.46,words:2238},t:"ESP32上的串口输出",i:"pen-to-square",O:5,y:"a"}}],["/posts/%E5%B7%A5%E4%BD%9C%E5%AE%A4%E5%86%85%E5%AE%B9/1.html",{loader:()=>a.e(4471).then(a.bind(a,3858)),meta:{d:1733063455e3,c:["使用指南"],g:["加密"],n:!0,r:{minutes:.66,words:197},t:"密码加密的文章",i:"lock",y:"a"}}],["/posts/%E5%B7%A5%E4%BD%9C%E5%AE%A4%E5%86%85%E5%AE%B9/2.html",{loader:()=>a.e(878).then(a.bind(a,389)),meta:{d:1749826215e3,c:["培训","单片机","PCB"],g:["Clang"],v:"/assets/images/ESP32.jpg",e:'\n<p>可以等一会儿，Altium正在加载</p>\n<iframe src="https://personal-viewer.365.altium.com/client/index.html?feature=embed&amp;source=94224C2A-164F-4689-89C0-88B464E80AF9&amp;activeView=Gerber" width="1280" height="720" style="overflow:hidden;border:none;width:100%;height:720px;" scrolling="no" allowfullscreen="true" onload="window.top.scrollTo(0,0);"></iframe>',r:{minutes:.31,words:92},t:"一个测试PCB工程在线加载的MarkDown文件",i:"pen-to-square",O:2,y:"a"}}],["/posts/%E9%A6%99%E6%A9%99%E6%B4%BE%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/1.html",{loader:()=>a.e(2677).then(a.bind(a,4951)),meta:{d:17356032e5,l:"2024年12月31日",c:["香橙派","orangepi","linux"],g:["orangepi","linux","wiring"],e:"\n<p>Linux板卡的开发主要分为软件层面和硬件层面</p>\n",r:{minutes:.19,words:58},t:"对Linux设备的简单认识",i:"pen-to-square",O:1,y:"a"}}],["/posts/%E9%A6%99%E6%A9%99%E6%B4%BE%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/2.html",{loader:()=>a.e(912).then(a.bind(a,4770)),meta:{d:17356032e5,l:"2024年12月31日",c:["香橙派","orangepi","linux"],g:["orangepi","linux","wiring","硬件"],e:"\n",r:{minutes:.14,words:41},t:"【硬件】香橙派GPIO的开发",i:"pen-to-square",O:2,y:"a"}}],["/posts/%E9%A6%99%E6%A9%99%E6%B4%BE%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/3.html",{loader:()=>a.e(359).then(a.bind(a,8151)),meta:{d:17356032e5,l:"2024年12月31日",c:["香橙派","orangepi","linux","QQ机器人"],g:["orangepi","linux","软件"],e:"\n<p>感兴趣的可以尝试</p>\n",r:{minutes:.18,words:54},t:"【软件】ZeroBotPlugin + Lagrange.Core QQ机器人 的搭建",i:"pen-to-square",O:3,y:"a"}}],["/posts/%E9%A6%99%E6%A9%99%E6%B4%BE%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/4.html",{loader:()=>a.e(1498).then(a.bind(a,2096)),meta:{d:17356032e5,l:"2024年12月31日",c:["香橙派","orangepi","linux","minecraft"],g:["orangepi","linux","软件"],e:"\n<p>感兴趣的可以尝试</p>\n",r:{minutes:.16,words:49},t:"【软件】MineCraft Forge服务器搭建",i:"pen-to-square",O:4,y:"a"}}],["/posts/%E9%A6%99%E6%A9%99%E6%B4%BE%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/5.html",{loader:()=>a.e(7281).then(a.bind(a,7083)),meta:{d:17356032e5,l:"2024年12月31日",c:["香橙派","orangepi","linux","opencv"],g:["orangepi","linux","软件","opencv"],e:"\n<p>感兴趣的可以尝试</p>\n",r:{minutes:.16,words:49},t:"【软件】OpenCV计算机视觉",i:"pen-to-square",O:5,y:"a"}}],["/posts/%E9%A6%99%E6%A9%99%E6%B4%BE%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/6.html",{loader:()=>a.e(9548).then(a.bind(a,8743)),meta:{d:17356032e5,l:"2024年12月31日",c:["香橙派","orangepi","linux","opencv"],g:["orangepi","linux","软件","opencv"],e:"\n<p>感兴趣的可以尝试</p>\n",r:{minutes:.15,words:46},t:"【软件】施工中",i:"pen-to-square",O:6,y:"a"}}],["/404.html",{loader:()=>a.e(7490).then(a.bind(a,1489)),meta:{t:""}}],["/",{loader:()=>a.e(4470).then(a.bind(a,5628)),meta:{t:""}}],["/posts/",{loader:()=>a.e(8666).then(a.bind(a,8063)),meta:{t:"Posts"}}],["/posts/2024%E4%BA%8C%E6%9C%9F%E5%9F%B9%E8%AE%AD/",{loader:()=>a.e(6360).then(a.bind(a,3747)),meta:{t:"2024二期培训"}}],["/posts/2024%E4%B8%80%E6%9C%9F%E5%9F%B9%E8%AE%AD/",{loader:()=>a.e(3636).then(a.bind(a,867)),meta:{t:"2024一期培训"}}],["/posts/2025%E6%9A%91%E5%81%87%E5%9F%B9%E8%AE%AD%E5%86%85%E5%AE%B9/",{loader:()=>a.e(7384).then(a.bind(a,1472)),meta:{t:"2025暑假培训内容"}}],["/posts/%E5%B7%A5%E4%BD%9C%E5%AE%A4%E5%86%85%E5%AE%B9/",{loader:()=>a.e(5184).then(a.bind(a,7272)),meta:{t:"工作室内容"}}],["/posts/%E9%A6%99%E6%A9%99%E6%B4%BE%E5%BC%80%E5%8F%91%E6%95%99%E7%A8%8B/",{loader:()=>a.e(642).then(a.bind(a,7086)),meta:{t:"香橙派开发教程"}}],["/category/",{loader:()=>a.e(3583).then(a.bind(a,3233)),meta:{t:"分类",I:!1}}],["/category/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",{loader:()=>a.e(4021).then(a.bind(a,7062)),meta:{t:"使用指南 分类",I:!1}}],["/category/%E6%8C%87%E5%8D%97/",{loader:()=>a.e(8622).then(a.bind(a,1659)),meta:{t:"指南 分类",I:!1}}],["/category/esp32s3/",{loader:()=>a.e(2051).then(a.bind(a,8539)),meta:{t:"ESP32S3 分类",I:!1}}],["/category/%E5%8D%95%E7%89%87%E6%9C%BA/",{loader:()=>a.e(346).then(a.bind(a,1364)),meta:{t:"单片机 分类",I:!1}}],["/category/%E5%9F%B9%E8%AE%AD/",{loader:()=>a.e(3370).then(a.bind(a,7202)),meta:{t:"培训 分类",I:!1}}],["/category/esp32/",{loader:()=>a.e(6769).then(a.bind(a,4610)),meta:{t:"ESP32 分类",I:!1}}],["/category/%E9%A6%99%E8%95%89/",{loader:()=>a.e(334).then(a.bind(a,6658)),meta:{t:"香蕉 分类",I:!1}}],["/category/%E6%B0%B4%E6%9E%9C/",{loader:()=>a.e(8484).then(a.bind(a,4200)),meta:{t:"水果 分类",I:!1}}],["/category/esp32s3nano/",{loader:()=>a.e(1329).then(a.bind(a,8938)),meta:{t:"ESP32S3NANO 分类",I:!1}}],["/category/python/",{loader:()=>a.e(1034).then(a.bind(a,9983)),meta:{t:"Python 分类",I:!1}}],["/category/ollama/",{loader:()=>a.e(9338).then(a.bind(a,5450)),meta:{t:"ollama 分类",I:!1}}],["/category/stm32/",{loader:()=>a.e(287).then(a.bind(a,6263)),meta:{t:"STM32 分类",I:!1}}],["/category/stm32cubemx/",{loader:()=>a.e(1647).then(a.bind(a,8900)),meta:{t:"STM32CubeMX 分类",I:!1}}],["/category/esp3/",{loader:()=>a.e(7529).then(a.bind(a,9786)),meta:{t:"ESP3 分类",I:!1}}],["/category/pcb/",{loader:()=>a.e(7793).then(a.bind(a,7754)),meta:{t:"PCB 分类",I:!1}}],["/category/%E9%A6%99%E6%A9%99%E6%B4%BE/",{loader:()=>a.e(6476).then(a.bind(a,7974)),meta:{t:"香橙派 分类",I:!1}}],["/category/orangepi/",{loader:()=>a.e(433).then(a.bind(a,7865)),meta:{t:"orangepi 分类",I:!1}}],["/category/linux/",{loader:()=>a.e(8654).then(a.bind(a,332)),meta:{t:"linux 分类",I:!1}}],["/category/qq%E6%9C%BA%E5%99%A8%E4%BA%BA/",{loader:()=>a.e(790).then(a.bind(a,2422)),meta:{t:"QQ机器人 分类",I:!1}}],["/category/minecraft/",{loader:()=>a.e(1283).then(a.bind(a,7760)),meta:{t:"minecraft 分类",I:!1}}],["/category/opencv/",{loader:()=>a.e(4209).then(a.bind(a,1449)),meta:{t:"opencv 分类",I:!1}}],["/tag/",{loader:()=>a.e(1797).then(a.bind(a,951)),meta:{t:"标签",I:!1}}],["/tag/%E7%A6%81%E7%94%A8/",{loader:()=>a.e(1331).then(a.bind(a,9753)),meta:{t:"标签: 禁用",I:!1}}],["/tag/%E5%B8%83%E5%B1%80/",{loader:()=>a.e(609).then(a.bind(a,7812)),meta:{t:"标签: 布局",I:!1}}],["/tag/markdown/",{loader:()=>a.e(7931).then(a.bind(a,8216)),meta:{t:"标签: Markdown",I:!1}}],["/tag/%E9%A1%B5%E9%9D%A2%E9%85%8D%E7%BD%AE/",{loader:()=>a.e(602).then(a.bind(a,9462)),meta:{t:"标签: 页面配置",I:!1}}],["/tag/%E4%BD%BF%E7%94%A8%E6%8C%87%E5%8D%97/",{loader:()=>a.e(1431).then(a.bind(a,8210)),meta:{t:"标签: 使用指南",I:!1}}],["/tag/hardware/",{loader:()=>a.e(5378).then(a.bind(a,5651)),meta:{t:"标签: hardware",I:!1}}],["/tag/%E5%9C%86/",{loader:()=>a.e(9048).then(a.bind(a,927)),meta:{t:"标签: 圆",I:!1}}],["/tag/esp32s3/",{loader:()=>a.e(5585).then(a.bind(a,7096)),meta:{t:"标签: ESP32S3",I:!1}}],["/tag/esp32/",{loader:()=>a.e(6735).then(a.bind(a,8673)),meta:{t:"标签: ESP32",I:!1}}],["/tag/esp/",{loader:()=>a.e(1918).then(a.bind(a,2573)),meta:{t:"标签: ESP",I:!1}}],["/tag/wifi/",{loader:()=>a.e(6175).then(a.bind(a,231)),meta:{t:"标签: wifi",I:!1}}],["/tag/%E9%BB%84/",{loader:()=>a.e(942).then(a.bind(a,7584)),meta:{t:"标签: 黄",I:!1}}],["/tag/%E5%BC%AF%E6%9B%B2%E7%9A%84/",{loader:()=>a.e(7817).then(a.bind(a,4230)),meta:{t:"标签: 弯曲的",I:!1}}],["/tag/%E9%95%BF/",{loader:()=>a.e(5519).then(a.bind(a,2394)),meta:{t:"标签: 长",I:!1}}],["/tag/fatfs/",{loader:()=>a.e(1826).then(a.bind(a,9182)),meta:{t:"标签: FatFS",I:!1}}],["/tag/sd/",{loader:()=>a.e(5509).then(a.bind(a,5607)),meta:{t:"标签: SD",I:!1}}],["/tag/sdmmc/",{loader:()=>a.e(5860).then(a.bind(a,3132)),meta:{t:"标签: SDMMC",I:!1}}],["/tag/sdio/",{loader:()=>a.e(4933).then(a.bind(a,1124)),meta:{t:"标签: SDIO",I:!1}}],["/tag/i2c/",{loader:()=>a.e(4466).then(a.bind(a,8682)),meta:{t:"标签: I2C",I:!1}}],["/tag/oled/",{loader:()=>a.e(4152).then(a.bind(a,539)),meta:{t:"标签: OLED",I:!1}}],["/tag/mpu6050/",{loader:()=>a.e(3209).then(a.bind(a,6712)),meta:{t:"标签: mpu6050",I:!1}}],["/tag/spi/",{loader:()=>a.e(3172).then(a.bind(a,2658)),meta:{t:"标签: SPI",I:!1}}],["/tag/tft/",{loader:()=>a.e(4228).then(a.bind(a,6324)),meta:{t:"标签: TFT",I:!1}}],["/tag/%E8%A7%A6%E6%91%B8%E5%B1%8F/",{loader:()=>a.e(241).then(a.bind(a,9758)),meta:{t:"标签: 触摸屏",I:!1}}],["/tag/spi/",{loader:()=>a.e(3172).then(a.bind(a,2658)),meta:{t:"标签: spi",I:!1}}],["/tag/ledc/",{loader:()=>a.e(4960).then(a.bind(a,5940)),meta:{t:"标签: ledc",I:!1}}],["/tag/pwm/",{loader:()=>a.e(1474).then(a.bind(a,5529)),meta:{t:"标签: PWM",I:!1}}],["/tag/pwm/",{loader:()=>a.e(1474).then(a.bind(a,5529)),meta:{t:"标签: pwm",I:!1}}],["/tag/clang/",{loader:()=>a.e(4003).then(a.bind(a,840)),meta:{t:"标签: Clang",I:!1}}],["/tag/%E5%9F%B9%E8%AE%AD/",{loader:()=>a.e(3712).then(a.bind(a,702)),meta:{t:"标签: 培训",I:!1}}],["/tag/%E5%8A%A0%E5%AF%86/",{loader:()=>a.e(8496).then(a.bind(a,5835)),meta:{t:"标签: 加密",I:!1}}],["/tag/orangepi/",{loader:()=>a.e(4087).then(a.bind(a,4548)),meta:{t:"标签: orangepi",I:!1}}],["/tag/linux/",{loader:()=>a.e(4316).then(a.bind(a,5922)),meta:{t:"标签: linux",I:!1}}],["/tag/wiring/",{loader:()=>a.e(6764).then(a.bind(a,9676)),meta:{t:"标签: wiring",I:!1}}],["/tag/%E7%A1%AC%E4%BB%B6/",{loader:()=>a.e(9948).then(a.bind(a,9869)),meta:{t:"标签: 硬件",I:!1}}],["/tag/%E8%BD%AF%E4%BB%B6/",{loader:()=>a.e(4707).then(a.bind(a,873)),meta:{t:"标签: 软件",I:!1}}],["/tag/opencv/",{loader:()=>a.e(4759).then(a.bind(a,6327)),meta:{t:"标签: opencv",I:!1}}],["/article/",{loader:()=>a.e(7511).then(a.bind(a,2772)),meta:{t:"文章",I:!1}}],["/star/",{loader:()=>a.e(7199).then(a.bind(a,353)),meta:{t:"星标",I:!1}}],["/timeline/",{loader:()=>a.e(5464).then(a.bind(a,4695)),meta:{t:"时间轴",I:!1}}]])},8761:(i,s,a)=>{a.d(s,{U:()=>n});const n=JSON.parse('{"base":"/blog/","lang":"zh-CN","title":"博客","description":"ouyanglingle 的博客","head":[],"locales":{}}')},6653:(i,s,a)=>{a.d(s,{K:()=>n});const n=JSON.parse('{"encrypt":{"config":{"/posts/工作室内容/1.html":["$2a$10$yJCDm2hy4D2uGg/MQKLqNOkhV11vbl9HXWa/o58jFg88il7B7Dp.."]}},"author":{"name":"王明照","url":"https://mister-hope.com"},"logo":"https://theme-hope-assets.vuejs.press/logo.svg","repo":"vuepress-theme-hope/vuepress-theme-hope","docsDir":"src","footer":"默认页脚","displayFooter":true,"blog":{"description":"一位热心的机协成员","intro":"/intro.html","medias":{"BiliBili":"https://space.bilibili.com/1469386543","Email":"ouyanglingle@outlook.com","Gitee":"https://example.com","GitHub":"https://example.com"}},"locales":{"/":{"lang":"zh-CN","navbarLocales":{"langName":"简体中文","selectLangAriaLabel":"选择语言"},"metaLocales":{"author":"作者","date":"写作日期","origin":"原创","views":"访问量","category":"分类","tag":"标签","readingTime":"阅读时间","words":"字数","toc":"此页内容","prev":"上一页","next":"下一页","lastUpdated":"上次编辑于","contributors":"贡献者","editLink":"在 GitHub 上编辑此页","print":"打印"},"blogLocales":{"article":"文章","articleList":"文章列表","category":"分类","tag":"标签","timeline":"时间轴","timelineTitle":"昨日不在","all":"全部","intro":"个人介绍","star":"星标","empty":"$text 为空"},"paginationLocales":{"prev":"上一页","next":"下一页","navigate":"跳转到","action":"前往","errorText":"请输入 1 到 $page 之前的页码！"},"outlookLocales":{"themeColor":"主题色","darkmode":"外观","fullscreen":"全屏"},"encryptLocales":{"iconLabel":"文章已加密","placeholder":"输入密码","remember":"记住密码","errorHint":"请输入正确的密码"},"routeLocales":{"skipToContent":"跳至主要內容","notFoundTitle":"页面不存在","notFoundMsg":["这里什么也没有","我们是怎么来到这儿的？","这 是 四 零 四 !","看起来你访问了一个失效的链接"],"back":"返回上一页","home":"带我回家"},"navbar":[],"sidebar":{"/":[{"text":"文章","icon":"book","prefix":"posts/","children":"structure"}]}}}}')},4923:(i,s,a)=>{},8123:(i,s,a)=>{a.d(s,{v:()=>n});const n={"/posts/":["tomato",{text:"2024一期培训",prefix:"2024一期培训/",collapsible:!0,children:["1","2","3","4","5"]},{text:"2024二期培训",prefix:"2024二期培训/",collapsible:!0,children:["1","2","3","4","5","6"]},{text:"2025暑假培训内容",prefix:"2025暑假培训内容/",collapsible:!0,children:["3","1","2","4","5"]},{text:"工作室内容",prefix:"工作室内容/",collapsible:!0,children:["2","1"]},{text:"香橙派开发教程",prefix:"香橙派开发教程/",collapsible:!0,children:["1","2","3","4","5","6"]}]}},2878:(i,s,a)=>{a.d(s,{P:()=>n});const n={BiliBili:'<svg xmlns="http://www.w3.org/2000/svg" class="icon bilibili-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#1296db"/><path fill="#fff" d="M745.363 177.725a47 47 0 0 1 0 66.3L702.5 286.85h44A141 141 0 0 1 887 427.512v281.25a141 141 0 0 1-141 140.626H277.25A141 141 0 0 1 137 708.763v-281.25a141 141 0 0 1 141-141h43.725l-42.788-42.825a47 47 0 1 1 66.263-66.3l99.45 99.45c2.963 2.962 5.438 6.187 7.425 9.637h120.487c1.988-3.45 4.5-6.75 7.463-9.675l99.413-99.45a47 47 0 0 1 66.3 0zm1.012 203.25h-468.75a47 47 0 0 0-46.763 43.388l-.112 3.525v281.25c0 24.712 19.125 44.962 43.387 46.724l3.488.15h468.75a47 47 0 0 0 46.763-43.387l.112-3.487v-281.25c0-26-21-47-47-46.876zm-375 93.75c26 0 47 21 47 47v47a47 47 0 1 1-93.75 0V521.6c0-26 21-47 47-47zm281.25 0c26 0 47 21 47 47v47a47 47 0 1 1-93.75 0V521.6c0-26 21-47 47-47z"/></svg>',Email:'<svg xmlns="http://www.w3.org/2000/svg" class="icon email-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#1384FF"/><path fill="#fff" d="M270.077 286.233H751.99c32.933 0 59.86 24.855 60.274 55.51l-301.023 157L210.217 341.88c.207-30.723 26.927-55.717 59.86-55.717zm-59.929 115.714-.276 277.756c0 30.931 27.134 56.2 60.205 56.2H751.99c33.14 0 60.274-25.269 60.274-56.2V401.81L518.283 551.492a15.88 15.88 0 0 1-14.43 0L210.148 401.947z"/></svg>',Gitee:'<svg xmlns="http://www.w3.org/2000/svg" class="icon gitee-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#C71D23"/><path fill="#fff" d="M772.953 454.723H480.17v.006a25.46 25.46 0 0 0-25.46 25.453l-.025 63.649a25.46 25.46 0 0 0 25.46 25.466l178.242-.007a25.46 25.46 0 0 1 25.459 25.46v12.73c0 42.18-34.198 76.378-76.378 76.378H365.583a25.46 25.46 0 0 1-25.46-25.46V416.533h-.006c0-42.18 34.192-76.378 76.378-76.378h356.388v-.013a25.46 25.46 0 0 0 25.46-25.446l.057-63.65h.013a25.46 25.46 0 0 0-25.46-25.471l-356.432.012c-105.453 0-190.946 85.493-190.946 190.946v356.433a25.46 25.46 0 0 0 25.46 25.46H626.56c94.913 0 171.852-76.94 171.852-171.852V480.182a25.46 25.46 0 0 0-25.46-25.46z"/></svg>',GitHub:'<svg xmlns="http://www.w3.org/2000/svg" class="icon github-icon" viewBox="0 0 1024 1024"><circle cx="512" cy="512" r="512" fill="#171515"/><path fill="#fff" d="M509.423 146.442c-200.317 0-362.756 162.42-362.756 362.8 0 160.266 103.936 296.24 248.109 344.217 18.139 3.327 24.76-7.872 24.76-17.486 0-8.613-.313-31.427-.49-61.702-100.912 21.923-122.205-48.63-122.205-48.63-16.495-41.91-40.28-53.067-40.28-53.067-32.937-22.51 2.492-22.053 2.492-22.053 36.407 2.566 55.568 37.386 55.568 37.386 32.362 55.438 84.907 39.43 105.58 30.143 3.296-23.444 12.667-39.43 23.032-48.498-80.557-9.156-165.246-40.28-165.246-179.297 0-39.604 14.135-71.988 37.342-97.348-3.731-9.178-16.18-46.063 3.556-96.009 0 0 30.46-9.754 99.76 37.19 28.937-8.048 59.97-12.071 90.823-12.211 30.807.14 61.843 4.165 90.822 12.21 69.26-46.944 99.663-37.189 99.663-37.189 19.792 49.946 7.34 86.831 3.61 96.01 23.25 25.359 37.29 57.742 37.29 97.347 0 139.366-84.82 170.033-165.637 179.013 13.026 11.2 24.628 33.342 24.628 67.182 0 48.498-.445 87.627-.445 99.521 0 9.702 6.535 20.988 24.945 17.444 144.03-48.067 247.881-183.95 247.881-344.175 0-200.378-162.442-362.798-362.802-362.798z"/></svg>'}}},i=>{i.O(0,[9469,4596],(()=>i(i.s=8731))),i.O()}]);