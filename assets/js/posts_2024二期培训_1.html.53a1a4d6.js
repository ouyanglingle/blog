"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[5279],{6262:(s,i)=>{i.A=(s,i)=>{const a=s.__vccOpts||s;for(const[s,n]of i)a[s]=n;return a}},3454:(s,i,a)=>{a.r(i),a.d(i,{comp:()=>e,data:()=>t});var n=a(641);const l={},e=(0,a(6262).A)(l,[["render",function(s,i){return(0,n.uX)(),(0,n.CE)("div",null,i[0]||(i[0]=[(0,n.Fv)('<h1 id="外部中断与定时器" tabindex="-1"><a class="header-anchor" href="#外部中断与定时器"><span>外部中断与定时器</span></a></h1><h2 id="_1-外部中断" tabindex="-1"><a class="header-anchor" href="#_1-外部中断"><span>1 外部中断</span></a></h2><h3 id="_1-1-什么是中断" tabindex="-1"><a class="header-anchor" href="#_1-1-什么是中断"><span>1.1 什么是中断</span></a></h3><ul><li>在单片机系统中，中断是一种机制。它允许单片机在执行正常程序的过程中，暂停当前的任务，转而去处理其它更为紧急或者有更高优先级的事件。当这个紧急事件处理完毕后，单片机又能够回到原来被中断的地方，继续执行之前的程序，就好像被打断的工作又重新开始一样。</li><li>例如，想象你正在房间里看书（这就相当于单片机在执行主程序），突然电话铃响了（这就是一个中断事件）。你放下书本去接电话（处理中断），接完电话后，你又能回到刚才看书的地方继续阅读（返回主程序）。</li></ul><h3 id="_1-2-外部中断介绍" tabindex="-1"><a class="header-anchor" href="#_1-2-外部中断介绍"><span>1.2 外部中断介绍</span></a></h3><ul><li><p>外部中断是指由单片机外部设备或信号触发的中断。它提供了一种让单片机能够及时响应外部事件的方式，使单片机可以和外部世界进行有效的交互。</p></li><li><p>外部中断是硬件中断的一种，它由微控制器外部的事件引发。微控制器的某些引脚被设计为对特定事件的发生做出响应，例如按钮的按压、传感器的信号改变等。这些指定的引脚通常被称为“外部中断引脚”。</p></li><li><p>之前做按键实验时，现有代码靠loop循环持续检测 IO 口来读取 GPIO 口输入。若后续添加大量代码，轮询到按键检测部分耗时久、效率低。比如特定场合下，按键可能 1 天才按一次，持续检测浪费大量时间。为解决该问题，引入外部中断概念，即仅在按键按下产生中断时，才执行相关功能。这大幅节省 CPU 资源，所以中断在实际项目中应用广泛 。</p></li><li><p>ESP32S3 的外部中断有上升沿触发、下降沿触发、低电平触发、高电平触发模式（可以在Arduino.h中查找到）。上升沿和下降沿触发如下：</p><figure><img src="https://github.com/ouyanglingle/blog/blob/main/src/.vuepress/public/assets/images/上升下降沿.jpg?raw=true" alt="上升下降沿.jpg" tabindex="0" loading="lazy"><figcaption>上升下降沿.jpg</figcaption></figure></li></ul><h3 id="_1-3-外部中断的作用和优势" tabindex="-1"><a class="header-anchor" href="#_1-3-外部中断的作用和优势"><span>1.3 外部中断的作用和优势</span></a></h3><p>实时响应外部事件 提高系统的效率 实现多任务处理的协同 灵活的触发方式适应多种设备</p><h3 id="_1-4-使用外部中断流程" tabindex="-1"><a class="header-anchor" href="#_1-4-使用外部中断流程"><span>1.4 使用外部中断流程</span></a></h3><h4 id="_1-4-1配置引脚" tabindex="-1"><a class="header-anchor" href="#_1-4-1配置引脚"><span>1.4.1配置引脚</span></a></h4><p>因为外部中断实际上还是读取引脚的状态，所以需要将引脚设置为输入或启用上拉电阻输入模式；在 <code>setup()</code> 函数中，使用 <code>pinMode()</code> 函数将引脚配置为输入引脚:</p><p><code>pinMode(pin, INPUT);</code>或<code>pinMode(pin, INPUT_PULLUP);</code></p><h4 id="_1-4-2将引脚绑定中断服务程序并设置触发中断方式" tabindex="-1"><a class="header-anchor" href="#_1-4-2将引脚绑定中断服务程序并设置触发中断方式"><span>1.4.2将引脚绑定中断服务程序并设置触发中断方式</span></a></h4><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> IntPin </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ISR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //省略代码...</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> setup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">\t// 配置中断引脚为GPIO5，假设外部中断回调函数为 ISR(), 中断下降沿触发</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">\tattachInterrupt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">digitalPinToInterrupt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(IntPin), ISR, FALLING);</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 或者</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    attachInterrupt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(IntPin, ISR, FALLING);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>：<code>attachInterrupt()</code>函数只适用于 <code>digitalPinToInterrupt()</code> 所支持的GPIO引脚，而不是所有的GPIO引脚都能用于外部中断。此外，在中断服务函数进行中断处理时，一定要避免使用占用 CPU 大量时间的操作（例如延时函数），以确保中断响应速度和精度。</p><p><code>attachInterrupt()</code> 函数有两种参数传递方式，可以传递函数指针或者函数名。如果是函数名，可以直接传递函数名，不需要加上括号。如果函数名被加上了括号，那就相当于调用该函数，传递的则是函数的返回值。如果使用函数指针，那么需要在函数名前加上<code>&amp;</code>符号。</p><h4 id="_1-4-3处理中断事件" tabindex="-1"><a class="header-anchor" href="#_1-4-3处理中断事件"><span>1.4.3处理中断事件</span></a></h4><p>a. <strong>尽量保证中断程序内容少</strong></p><p>b. <strong>避免</strong>在中断处理函数中<strong>使用</strong> <strong>阻塞函数</strong>（如 <code>delay()</code>），使用非阻塞的延迟方法来处理需要延迟的操作（<code>micros() 函数</code>），以保证中断的正常执行和系统的稳定性。这是因为 <code>delay()</code> 函数会阻塞整个系统，包括中断的正常执行。当中断触发时，处理函数应该尽快执行完毕，以确保<strong>及时响应</strong>并避免中断积压；</p><p>c. <strong>与主程序共享的变量要加上 volatile 关键字；</strong></p><p>d. 在 Arduino 中使用中断时，应尽量避免在中断处理函数中使用 <code>Serial</code> 串口对象的打印函数。当在中断处理函数中使用 <code>Serial</code> 打印函数时，会导致以下问题：</p><ul><li>时间延迟：<code>Serial</code> 打印函数通常是比较耗时的操作，它会<strong>阻塞中断</strong>的执行时间，导致中断响应的延迟。这可能会导致在中断期间丢失其他重要的中断事件或导致系统不稳定。</li><li>缓冲区溢出：<code>Serial</code> 对象在内部使用一个缓冲区来存储要发送的数据。如果在中断处理函数中频繁调用 <code>Serial</code> 打印函数，可能会导致缓冲区溢出，造成数据丢失或不可预测的行为。</li></ul><p>为了避免这些问题，建议在中断处理函数中尽量<strong>避免使用 <code>Serial</code> 打印函数</strong>。如果需要在中断处理函数中输出调试信息，可以使用其他方式，如<strong>设置标志位</strong>，在主循环中检查标志位并进行打印。</p><h4 id="_1-4-4示例代码与现象" tabindex="-1"><a class="header-anchor" href="#_1-4-4示例代码与现象"><span>1.4.4示例代码与现象</span></a></h4><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;Arduino.h&gt;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 将按钮一端连接到GPIO4引脚，另一端连接到GND，和板子共地</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 将LED正极接GPIO15，负极接地</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#define</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Button</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#define</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> LED</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 15</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> buttonISR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> bool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> state </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    digitalWrite</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(LED, state </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;"> !</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">state);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> setup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    Serial</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">begin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">115200</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    pinMode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(Button, INPUT_PULLUP);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    pinMode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(LED, OUTPUT);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    attachInterrupt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(Button, buttonISR, FALLING);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    delay</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> loop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    delay</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">##include</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Arduino</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">h</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">&gt;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#define</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> BUTTON</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#define</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> LED</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 15</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//LED状态</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">bool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> led_flag </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//按键状态（中断回调函数与主程序共享的变量要加上 volatile 关键字）</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">volatile</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> bool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> flag </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//中断回调函数</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ISR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  flag </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> setup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //设置KEY引脚（0） 为上拉输入模式</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  pinMode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(BUTTON, INPUT_PULLUP);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //设置LED引脚（48） 为输出模式</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  pinMode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(LED, OUTPUT);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 配置中断引脚为GPIO0，外部中断回调函数为 ISR(), 中断下降沿触发</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  attachInterrupt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">digitalPinToInterrupt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(BUTTON), ISR, FALLING);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> loop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //当按键按下时会产生一个下降沿，进入回调函数 ISR()，而ISR()中只是将flag = true</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //故当flag == true 时，说明按键按下</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ( flag </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> )</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //延时200毫秒</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    delay</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">200</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //LED状态取反</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    digitalWrite</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(LED, led_flag</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">led_flag);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 重置中断标志位</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    flag </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-定时器" tabindex="-1"><a class="header-anchor" href="#_2-定时器"><span>2. 定时器</span></a></h2>',27)]))}]]),t=JSON.parse('{"path":"/posts/2024%E4%BA%8C%E6%9C%9F%E5%9F%B9%E8%AE%AD/1.html","title":"外部中断与定时器","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","date":"2024-12-29T00:00:00.000Z","category":["培训","ESP32"],"tag":["ESP32S3","ESP32","ESP"],"order":1,"description":"外部中断与定时器 1 外部中断 1.1 什么是中断 在单片机系统中，中断是一种机制。它允许单片机在执行正常程序的过程中，暂停当前的任务，转而去处理其它更为紧急或者有更高优先级的事件。当这个紧急事件处理完毕后，单片机又能够回到原来被中断的地方，继续执行之前的程序，就好像被打断的工作又重新开始一样。 例如，想象你正在房间里看书（这就相当于单片机在执行主程序...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/2024%E4%BA%8C%E6%9C%9F%E5%9F%B9%E8%AE%AD/1.html"}],["meta",{"property":"og:site_name","content":"博客"}],["meta",{"property":"og:title","content":"外部中断与定时器"}],["meta",{"property":"og:description","content":"外部中断与定时器 1 外部中断 1.1 什么是中断 在单片机系统中，中断是一种机制。它允许单片机在执行正常程序的过程中，暂停当前的任务，转而去处理其它更为紧急或者有更高优先级的事件。当这个紧急事件处理完毕后，单片机又能够回到原来被中断的地方，继续执行之前的程序，就好像被打断的工作又重新开始一样。 例如，想象你正在房间里看书（这就相当于单片机在执行主程序..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://github.com/ouyanglingle/blog/blob/main/src/.vuepress/public/assets/images/%E4%B8%8A%E5%8D%87%E4%B8%8B%E9%99%8D%E6%B2%BF.jpg?raw=true"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-16T15:03:58.000Z"}],["meta",{"property":"article:tag","content":"ESP32S3"}],["meta",{"property":"article:tag","content":"ESP32"}],["meta",{"property":"article:tag","content":"ESP"}],["meta",{"property":"article:published_time","content":"2024-12-29T00:00:00.000Z"}],["meta",{"property":"article:modified_time","content":"2025-01-16T15:03:58.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"外部中断与定时器\\",\\"image\\":[\\"https://github.com/ouyanglingle/blog/blob/main/src/.vuepress/public/assets/images/%E4%B8%8A%E5%8D%87%E4%B8%8B%E9%99%8D%E6%B2%BF.jpg?raw=true\\"],\\"datePublished\\":\\"2024-12-29T00:00:00.000Z\\",\\"dateModified\\":\\"2025-01-16T15:03:58.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"王明照\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"1 外部中断","slug":"_1-外部中断","link":"#_1-外部中断","children":[{"level":3,"title":"1.1 什么是中断","slug":"_1-1-什么是中断","link":"#_1-1-什么是中断","children":[]},{"level":3,"title":"1.2 外部中断介绍","slug":"_1-2-外部中断介绍","link":"#_1-2-外部中断介绍","children":[]},{"level":3,"title":"1.3 外部中断的作用和优势","slug":"_1-3-外部中断的作用和优势","link":"#_1-3-外部中断的作用和优势","children":[]},{"level":3,"title":"1.4 使用外部中断流程","slug":"_1-4-使用外部中断流程","link":"#_1-4-使用外部中断流程","children":[]}]},{"level":2,"title":"2. 定时器","slug":"_2-定时器","link":"#_2-定时器","children":[]}],"git":{"createdTime":1735489622000,"updatedTime":1737039838000,"contributors":[{"name":"graphwmz","email":"ouyanglingle@outlook.com","commits":7}]},"readingTime":{"minutes":5.66,"words":1697},"filePathRelative":"posts/2024二期培训/1.md","localizedDate":"2024年12月29日","excerpt":"\\n<h2>1 外部中断</h2>\\n<h3>1.1 什么是中断</h3>\\n<ul>\\n<li>在单片机系统中，中断是一种机制。它允许单片机在执行正常程序的过程中，暂停当前的任务，转而去处理其它更为紧急或者有更高优先级的事件。当这个紧急事件处理完毕后，单片机又能够回到原来被中断的地方，继续执行之前的程序，就好像被打断的工作又重新开始一样。</li>\\n<li>例如，想象你正在房间里看书（这就相当于单片机在执行主程序），突然电话铃响了（这就是一个中断事件）。你放下书本去接电话（处理中断），接完电话后，你又能回到刚才看书的地方继续阅读（返回主程序）。</li>\\n</ul>\\n<h3>1.2 外部中断介绍</h3>","autoDesc":true}')}}]);