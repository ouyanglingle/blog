"use strict";(self.webpackChunkblog=self.webpackChunkblog||[]).push([[5279],{6262:(i,s)=>{s.A=(i,s)=>{const a=i.__vccOpts||i;for(const[i,n]of s)a[i]=n;return a}},2049:(i,s,a)=>{a.r(s),a.d(s,{comp:()=>e,data:()=>t});var n=a(641);const l={},e=(0,a(6262).A)(l,[["render",function(i,s){return(0,n.uX)(),(0,n.CE)("div",null,s[0]||(s[0]=[(0,n.Fv)('<h1 id="外部中断与定时器" tabindex="-1"><a class="header-anchor" href="#外部中断与定时器"><span>外部中断与定时器</span></a></h1><h2 id="_1-外部中断" tabindex="-1"><a class="header-anchor" href="#_1-外部中断"><span>1 外部中断</span></a></h2><h3 id="_1-1-什么是中断" tabindex="-1"><a class="header-anchor" href="#_1-1-什么是中断"><span>1.1 什么是中断</span></a></h3><ul><li>在单片机系统中，中断是一种机制。它允许单片机在执行正常程序的过程中，暂停当前的任务，转而去处理其它更为紧急或者有更高优先级的事件。当这个紧急事件处理完毕后，单片机又能够回到原来被中断的地方，继续执行之前的程序，就好像被打断的工作又重新开始一样。</li><li>例如，想象你正在房间里看书（这就相当于单片机在执行主程序），突然电话铃响了（这就是一个中断事件）。你放下书本去接电话（处理中断），接完电话后，你又能回到刚才看书的地方继续阅读（返回主程序）。</li></ul><h3 id="_1-2-外部中断介绍" tabindex="-1"><a class="header-anchor" href="#_1-2-外部中断介绍"><span>1.2 外部中断介绍</span></a></h3><ul><li><p>外部中断是指由单片机外部设备或信号触发的中断。它提供了一种让单片机能够及时响应外部事件的方式，使单片机可以和外部世界进行有效的交互。</p></li><li><p>外部中断是硬件中断的一种，它由微控制器外部的事件引发。微控制器的某些引脚被设计为对特定事件的发生做出响应，例如按钮的按压、传感器的信号改变等。这些指定的引脚通常被称为“外部中断引脚”。</p></li><li><p>之前做按键实验时，现有代码靠loop循环持续检测 IO 口来读取 GPIO 口输入。若后续添加大量代码，轮询到按键检测部分耗时久、效率低。比如特定场合下，按键可能 1 天才按一次，持续检测浪费大量时间。为解决该问题，引入外部中断概念，即仅在按键按下产生中断时，才执行相关功能。这大幅节省 CPU 资源，所以中断在实际项目中应用广泛 。</p></li><li><p>ESP32S3 的外部中断有上升沿触发、下降沿触发、低电平触发、高电平触发模式（可以在Arduino.h中查找到）。上升沿和下降沿触发如下：</p><figure><img src="https://github.com/ouyanglingle/blog/blob/main/src/.vuepress/public/assets/images/上升下降沿.jpg?raw=true" alt="上升下降沿.jpg" tabindex="0" loading="lazy"><figcaption>上升下降沿.jpg</figcaption></figure></li></ul><h3 id="_1-3-外部中断的作用和优势" tabindex="-1"><a class="header-anchor" href="#_1-3-外部中断的作用和优势"><span>1.3 外部中断的作用和优势</span></a></h3><p>实时响应外部事件 提高系统的效率 实现多任务处理的协同 灵活的触发方式适应多种设备</p><h3 id="_1-4-使用外部中断流程" tabindex="-1"><a class="header-anchor" href="#_1-4-使用外部中断流程"><span>1.4 使用外部中断流程</span></a></h3><h4 id="_1-4-1配置引脚" tabindex="-1"><a class="header-anchor" href="#_1-4-1配置引脚"><span>1.4.1配置引脚</span></a></h4><p>因为外部中断实际上还是读取引脚的状态，所以需要将引脚设置为输入或启用上拉电阻输入模式；在 <code>setup()</code> 函数中，使用 <code>pinMode()</code> 函数将引脚配置为输入引脚:</p><p><code>pinMode(pin, INPUT);</code>或<code>pinMode(pin, INPUT_PULLUP);</code></p><h4 id="_1-4-2将引脚绑定中断服务程序并设置触发中断方式" tabindex="-1"><a class="header-anchor" href="#_1-4-2将引脚绑定中断服务程序并设置触发中断方式"><span>1.4.2将引脚绑定中断服务程序并设置触发中断方式</span></a></h4><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">int</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> IntPin </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ISR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //省略代码...</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> setup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">\t// 配置中断引脚为GPIO5，假设外部中断回调函数为 ISR(), 中断下降沿触发</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">\tattachInterrupt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">digitalPinToInterrupt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(IntPin), ISR, FALLING);</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 或者</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    attachInterrupt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(IntPin, ISR, FALLING);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>注意</strong>：<code>attachInterrupt()</code>函数只适用于 <code>digitalPinToInterrupt()</code> 所支持的GPIO引脚，而不是所有的GPIO引脚都能用于外部中断。此外，在中断服务函数进行中断处理时，一定要避免使用占用 CPU 大量时间的操作（例如延时函数），以确保中断响应速度和精度。</p><p><code>attachInterrupt()</code> 函数有两种参数传递方式，可以传递函数指针或者函数名。如果是函数名，可以直接传递函数名，不需要加上括号。如果函数名被加上了括号，那就相当于调用该函数，传递的则是函数的返回值。如果使用函数指针，那么需要在函数名前加上<code>&amp;</code>符号。</p><h4 id="_1-4-3处理中断事件" tabindex="-1"><a class="header-anchor" href="#_1-4-3处理中断事件"><span>1.4.3处理中断事件</span></a></h4><p>a. <strong>尽量保证中断程序内容少</strong></p><p>b. <strong>避免</strong>在中断处理函数中<strong>使用</strong>阻塞函数**（如 <code>delay()</code>），使用非阻塞的延迟方法来处理需要延迟的操作（<code>micros() 函数</code>），以保证中断的正常执行和系统的稳定性。这是因为 <code>delay()</code> 函数会阻塞整个系统，包括中断的正常执行。当中断触发时，处理函数应该尽快执行完毕，以确保<strong>及时响应</strong>并避免中断积压；</p><p>c. <strong>与主程序共享的变量要加上 volatile 关键字；</strong></p><p>d. 在 Arduino 中使用中断时，应尽量避免在中断处理函数中使用 <code>Serial</code> 串口对象的打印函数。当在中断处理函数中使用 <code>Serial</code> 打印函数时，会导致以下问题：</p><ul><li>时间延迟：<code>Serial</code> 打印函数通常是比较耗时的操作，它会<strong>阻塞中断</strong>的执行时间，导致中断响应的延迟。这可能会导致在中断期间丢失其他重要的中断事件或导致系统不稳定。</li><li>缓冲区溢出：<code>Serial</code> 对象在内部使用一个缓冲区来存储要发送的数据。如果在中断处理函数中频繁调用 <code>Serial</code> 打印函数，可能会导致缓冲区溢出，造成数据丢失或不可预测的行为。</li></ul><p>为了避免这些问题，建议在中断处理函数中尽量<strong>避免使用 <code>Serial</code> 打印函数</strong>。如果需要在中断处理函数中输出调试信息，可以使用其他方式，如<strong>设置标志位</strong>，在主循环中检查标志位并进行打印。</p><h4 id="_1-4-4示例代码与现象" tabindex="-1"><a class="header-anchor" href="#_1-4-4示例代码与现象"><span>1.4.4示例代码与现象</span></a></h4><p>按钮控制LED灯的状态，但是外部中断</p><p><strong>示例程序1：</strong></p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;Arduino.h&gt;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 将按钮一端连接到GPIO4引脚，另一端连接到GND，和板子共地</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 将LED正极接GPIO15，负极接地</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#define</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Button</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#define</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> LED</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 15</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> buttonISR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> bool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> state </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    digitalWrite</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(LED, state </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;"> !</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">state);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> setup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    Serial</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">begin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">115200</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    pinMode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(Button, INPUT_PULLUP);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    pinMode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(LED, OUTPUT);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    attachInterrupt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(Button, buttonISR, FALLING);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    delay</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> loop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() {</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    delay</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>示例程序2：</strong></p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;Arduino.h&gt;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#define</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> BUTTON</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 4</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#define</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> LED</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 15</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//LED状态</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">bool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> led_flag </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//按键状态（中断回调函数与主程序共享的变量要加上 volatile 关键字）</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">volatile</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> bool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> flag </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//中断回调函数</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ISR</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  flag </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> setup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //设置KEY引脚（0） 为上拉输入模式</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  pinMode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(BUTTON, INPUT_PULLUP);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //设置LED引脚（48） 为输出模式</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  pinMode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(LED, OUTPUT);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  // 配置中断引脚为GPIO0，外部中断回调函数为 ISR(), 中断下降沿触发</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">  attachInterrupt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">digitalPinToInterrupt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(BUTTON), ISR, FALLING);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> loop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //当按键按下时会产生一个下降沿，进入回调函数 ISR()，而ISR()中只是将flag = true</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">  //故当flag == true 时，说明按键按下</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">  if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> ( flag </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> )</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  {</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //延时200毫秒</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    delay</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">200</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //LED状态取反</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    digitalWrite</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(LED, led_flag</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">led_flag);</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 重置中断标志位</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    flag </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">  }</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="_2-定时器" tabindex="-1"><a class="header-anchor" href="#_2-定时器"><span>2. 定时器</span></a></h2><h3 id="_2-1-定时器介绍" tabindex="-1"><a class="header-anchor" href="#_2-1-定时器介绍"><span>2.1 定时器介绍</span></a></h3><p>定时器是单片机内部集成，可以通过编程控制。单片机的定时功能是通过计数来实现的，当单片机每一个机器周期产生一个脉冲时，计数器就加一。定时器的主要功能是用来计时，时间到达之后可以产生中断，提醒计时时间到，然后可以在中断函数中去执行功能。比如我们想让一个 led 灯 1 秒钟翻转一次，就可以使用定时器配置为 1 秒钟触发中断，然后在中断函数中执行 led 翻转的程序。</p><ul><li><strong>硬件定时器：</strong> 硬件定时器依托微控制器硬件，通过专门的计时 / 计数器电路，为系统提供定时功能。其最大的亮点就是高精度与高可靠性，这源于它独立于软件任务以及操作系统调度机制。在对定时精度要求极高的场景，比如生成 PWM 信号，或是进行精准时间测量，硬件定时器无疑是最佳之选。定时工作由硬件直接把控，即便主 CPU 被其他任务占满，定时器也能在预设时间一到，丝毫不差地触发回调操作 。</li><li><strong>软件定时器：</strong> 软件定时器是借助操作系统或软件库达成的定时器。它借助操作系统所提供的相关机制，对定时器功能加以模拟。由于软件定时器的运行依赖于系统当前的负载状况以及任务调度策略，所以与硬件定时器相比，其精准度稍显逊色。然而，软件定时器往往具备更高的灵活性，能够同时创建多个定时器，在那些对时间控制精度要求不高的场景中，软件定时器的适用性更强。</li></ul><h3 id="_2-2-定时器基本参数" tabindex="-1"><a class="header-anchor" href="#_2-2-定时器基本参数"><span>2.2 定时器基本参数</span></a></h3><p><strong>ESP32S3芯片</strong>集成了丰富的硬件定时器资源，诸如Timer0、Timer1、Timer2、Timer3 等。每个定时器均配备多个通道，用户可通过指定具体的定时器号与通道号，灵活选择所需使用的定时器及其通道。 在操作硬件定时器时，需关注一些基本的定时器参数，其中包括定时器号、通道号、预分频器、自动重新加载值以及定时器中断使能等。下面是一些相关的基本概念及定时器的共有属性：</p><ul><li><strong>计时器（Counter）</strong>：作为定时器的核心构成部分，其作用是持续不断地进行计数操作，为定时器的各项功能提供基础数据支持。</li><li><strong>定时器溢出（Overflow）</strong>：当计数器累加到其所能表示的最大值后，会自动归零，这一现象即被称为定时器溢出。该事件通常会触发一系列后续动作，比如标志位的变更等。</li><li><strong>预置值（Preset Value）</strong>：当计数器的计数值达到此预置值时，便会引发特定事件，如产生中断信号，从而通知系统执行相应的处理流程。</li><li><strong>分频器（Prescaler）</strong>：其主要功能是降低计数器所接收的时钟信号频率。通过分频操作，能够有效延长定时器的最大计时范围，满足不同场景下对定时时长的多样化需求。</li><li><strong>中断（Interrupt）</strong>：用户可对定时器进行配置，使其在计数值达到预置值时产生中断信号。一旦触发中断，系统会立即暂停当前正在执行的任务，转而执行预先设定好的中断处理程序，在该程序中完成特定的任务。</li></ul><h3 id="_2-3-定时器的使用流程" tabindex="-1"><a class="header-anchor" href="#_2-3-定时器的使用流程"><span>2.3 定时器的使用流程</span></a></h3><h4 id="_2-3-1-创建定时器对象" tabindex="-1"><a class="header-anchor" href="#_2-3-1-创建定时器对象"><span>2.3.1 创建定时器对象</span></a></h4><p>在程序的顶部声明一个<code>hw_timer_t</code> 类型的<strong>全局变量</strong>，用于表示定时器对象。</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">hw_timer_t</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">timer </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><h4 id="_2-3-2-初始化定时器" tabindex="-1"><a class="header-anchor" href="#_2-3-2-初始化定时器"><span>2.3.2 初始化定时器</span></a></h4><p><strong>使用示例：</strong></p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">timer </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> timerBegin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">80</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>函数讲解：</strong></p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">hw_timer_t</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> timerBegin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">uint8_t</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> num</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">uint16_t</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> divider</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">bool</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> countUp</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// uint8_t num: 定时器编号，可选值为 0-3 等。</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// uint16_t divider: 定时器的分频系数，用于设置定时器的时钟频率。较大的分频系数将降低定时器的时钟频</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">//                   率。可以根据需要选择合适的值，一般设置为 80 即可；</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// bool countUp: 指定定时器是否为向上计数模式。设置为 true 表示向上计数，设置为 false 表示向下计数。</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-3-注册中断处理函数" tabindex="-1"><a class="header-anchor" href="#_2-3-3-注册中断处理函数"><span>2.3.3 注册中断处理函数</span></a></h4><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> timer_INT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    //命名符合C/C++标准即可</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-4-配置定时器" tabindex="-1"><a class="header-anchor" href="#_2-3-4-配置定时器"><span>2.3.4 配置定时器</span></a></h4><p><strong>使用示例：</strong></p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">timerAttachInterrupt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(timer,timer_INT,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p><strong>函数讲解：</strong></p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> timerAttachInterrupt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">hw_timer_t</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">timer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> (*</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">fn</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">), </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">bool</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> edge</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// hw_timer_t *timer: 定时器指针</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// void (*fn)(void): 中断处理函数</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// bool edge: 用于指定中断触发的边缘类型，可选值为 ture（边沿触发）或 false（电平触发）</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h4 id="_2-3-5-设置定时模式并启动定时器" tabindex="-1"><a class="header-anchor" href="#_2-3-5-设置定时模式并启动定时器"><span>2.3.5 设置定时模式并启动定时器</span></a></h4><p><strong>使用示例：</strong></p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 定时模式，单位us，只触发一次</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">timerAlarmWrite</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(timer,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1000000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 定时模式，单位us，自动重装</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">timerAlarmWrite</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(timer,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1000000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">); </span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 启动定时器</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">timerAlarmEnable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(timer);</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>函数讲解：</strong></p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> timerAlarmWrite</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">hw_timer_t</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">timer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">uint64_t</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> alarm_value</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">bool</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;"> autoreload</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// hw_timer_t *timer: 定时器指针</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// uint64_t alarm_value: 定时器的计数值，即触发时间间隔，单位us</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// bool autoreload: 是否自动重载计数值，可选值为 true（自动重载）或 false（单次触发）</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> timerAlarmEnable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">hw_timer_t</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> *</span><span style="--shiki-light:#383A42;--shiki-light-font-style:inherit;--shiki-dark:#E06C75;--shiki-dark-font-style:italic;">timer</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="_2-4-示例代码" tabindex="-1"><a class="header-anchor" href="#_2-4-示例代码"><span>2.4 示例代码</span></a></h3><p>这个示例代码的效果是每隔100ms改变灯的状态</p><div class="language-cpp line-numbers-mode" data-highlighter="shiki" data-ext="cpp" data-title="cpp" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;Arduino.h&gt;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#define</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> LED</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 15</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">hw_timer_s </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">timer </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> NULL</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> timerINT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> bool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> state </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    digitalWrite</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(LED, state </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;"> !</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">state);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> setup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    pinMode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(LED, OUTPUT);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    timer </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> timerBegin</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">80</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    timerAttachInterrupt</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(timer, timerINT, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    timerAlarmWrite</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(timer, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0.1</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">*</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1000000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">true</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 0.1 * 1000000us = 0.1s = 100ms</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    timerAlarmEnable</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(timer);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> loop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 循环不建议空跑，放个延时函数</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    delay</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>最后是软件定时器的示例代码 比较简单，就不多解释了。</p><div class="language-c++ line-numbers-mode" data-highlighter="shiki" data-ext="c++" data-title="c++" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;Arduino.h&gt;</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#include</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &lt;Ticker.h&gt;</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;"> // 这个是ESP32 Arduino固件自带的库</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">#define</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> LED</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 15</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">Ticker ticker;</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> timerINT</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> bool</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> state </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    digitalWrite</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(LED, state </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#56B6C2;"> !</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">state);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> setup</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    pinMode</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(LED, OUTPUT);</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    ticker</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">once_ms</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">2000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, timerINT);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 2000ms后执行一次timerINT, 之后就不再执行</span></span>\n<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    ticker</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">attach</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">3</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, timerINT);</span><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">// 每隔1s执行一次timerINT</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span>\n<span class="line"></span>\n<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">void</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> loop</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">{</span></span>\n<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-light-font-style:italic;--shiki-dark:#7F848E;--shiki-dark-font-style:italic;">    // 循环不建议空跑，放个延时函数</span></span>\n<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    delay</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">1000</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>\n<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div>',62)]))}]]),t=JSON.parse('{"path":"/posts/2024%E4%BA%8C%E6%9C%9F%E5%9F%B9%E8%AE%AD/1.html","title":"外部中断与定时器","lang":"zh-CN","frontmatter":{"icon":"pen-to-square","category":["培训","ESP32"],"tag":["ESP32S3","ESP32","ESP"],"order":1,"description":"外部中断与定时器 1 外部中断 1.1 什么是中断 在单片机系统中，中断是一种机制。它允许单片机在执行正常程序的过程中，暂停当前的任务，转而去处理其它更为紧急或者有更高优先级的事件。当这个紧急事件处理完毕后，单片机又能够回到原来被中断的地方，继续执行之前的程序，就好像被打断的工作又重新开始一样。 例如，想象你正在房间里看书（这就相当于单片机在执行主程序...","head":[["meta",{"property":"og:url","content":"https://mister-hope.github.io/blog/posts/2024%E4%BA%8C%E6%9C%9F%E5%9F%B9%E8%AE%AD/1.html"}],["meta",{"property":"og:site_name","content":"博客"}],["meta",{"property":"og:title","content":"外部中断与定时器"}],["meta",{"property":"og:description","content":"外部中断与定时器 1 外部中断 1.1 什么是中断 在单片机系统中，中断是一种机制。它允许单片机在执行正常程序的过程中，暂停当前的任务，转而去处理其它更为紧急或者有更高优先级的事件。当这个紧急事件处理完毕后，单片机又能够回到原来被中断的地方，继续执行之前的程序，就好像被打断的工作又重新开始一样。 例如，想象你正在房间里看书（这就相当于单片机在执行主程序..."}],["meta",{"property":"og:type","content":"article"}],["meta",{"property":"og:image","content":"https://github.com/ouyanglingle/blog/blob/main/src/.vuepress/public/assets/images/%E4%B8%8A%E5%8D%87%E4%B8%8B%E9%99%8D%E6%B2%BF.jpg?raw=true"}],["meta",{"property":"og:locale","content":"zh-CN"}],["meta",{"property":"og:updated_time","content":"2025-01-17T10:35:44.000Z"}],["meta",{"property":"article:tag","content":"ESP32S3"}],["meta",{"property":"article:tag","content":"ESP32"}],["meta",{"property":"article:tag","content":"ESP"}],["meta",{"property":"article:modified_time","content":"2025-01-17T10:35:44.000Z"}],["script",{"type":"application/ld+json"},"{\\"@context\\":\\"https://schema.org\\",\\"@type\\":\\"Article\\",\\"headline\\":\\"外部中断与定时器\\",\\"image\\":[\\"https://github.com/ouyanglingle/blog/blob/main/src/.vuepress/public/assets/images/%E4%B8%8A%E5%8D%87%E4%B8%8B%E9%99%8D%E6%B2%BF.jpg?raw=true\\"],\\"dateModified\\":\\"2025-01-17T10:35:44.000Z\\",\\"author\\":[{\\"@type\\":\\"Person\\",\\"name\\":\\"王明照\\",\\"url\\":\\"https://mister-hope.com\\"}]}"]]},"headers":[{"level":2,"title":"1 外部中断","slug":"_1-外部中断","link":"#_1-外部中断","children":[{"level":3,"title":"1.1 什么是中断","slug":"_1-1-什么是中断","link":"#_1-1-什么是中断","children":[]},{"level":3,"title":"1.2 外部中断介绍","slug":"_1-2-外部中断介绍","link":"#_1-2-外部中断介绍","children":[]},{"level":3,"title":"1.3 外部中断的作用和优势","slug":"_1-3-外部中断的作用和优势","link":"#_1-3-外部中断的作用和优势","children":[]},{"level":3,"title":"1.4 使用外部中断流程","slug":"_1-4-使用外部中断流程","link":"#_1-4-使用外部中断流程","children":[]}]},{"level":2,"title":"2. 定时器","slug":"_2-定时器","link":"#_2-定时器","children":[{"level":3,"title":"2.1 定时器介绍","slug":"_2-1-定时器介绍","link":"#_2-1-定时器介绍","children":[]},{"level":3,"title":"2.2 定时器基本参数","slug":"_2-2-定时器基本参数","link":"#_2-2-定时器基本参数","children":[]},{"level":3,"title":"2.3 定时器的使用流程","slug":"_2-3-定时器的使用流程","link":"#_2-3-定时器的使用流程","children":[]},{"level":3,"title":"2.4 示例代码","slug":"_2-4-示例代码","link":"#_2-4-示例代码","children":[]}]}],"git":{"createdTime":1735489622000,"updatedTime":1737110144000,"contributors":[{"name":"graphwmz","email":"ouyanglingle@outlook.com","commits":13}]},"readingTime":{"minutes":10.96,"words":3287},"filePathRelative":"posts/2024二期培训/1.md","localizedDate":"2024年12月29日","excerpt":"\\n<h2>1 外部中断</h2>\\n<h3>1.1 什么是中断</h3>\\n<ul>\\n<li>在单片机系统中，中断是一种机制。它允许单片机在执行正常程序的过程中，暂停当前的任务，转而去处理其它更为紧急或者有更高优先级的事件。当这个紧急事件处理完毕后，单片机又能够回到原来被中断的地方，继续执行之前的程序，就好像被打断的工作又重新开始一样。</li>\\n<li>例如，想象你正在房间里看书（这就相当于单片机在执行主程序），突然电话铃响了（这就是一个中断事件）。你放下书本去接电话（处理中断），接完电话后，你又能回到刚才看书的地方继续阅读（返回主程序）。</li>\\n</ul>\\n<h3>1.2 外部中断介绍</h3>","autoDesc":true}')}}]);